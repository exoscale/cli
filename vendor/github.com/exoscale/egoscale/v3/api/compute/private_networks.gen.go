// Code generated by v3/generator; DO NOT EDIT.
package compute

import (
	"context"

	"github.com/exoscale/egoscale/v3/oapi"
	"github.com/exoscale/egoscale/v3/utils"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

type PrivateNetworks struct {
	oapiClient *oapi.ClientWithResponses
}

func NewPrivateNetworks(c *oapi.ClientWithResponses) *PrivateNetworks {
	return &PrivateNetworks{c}
}

func (a *PrivateNetworks) List(ctx context.Context) ([]oapi.PrivateNetwork, error) {
	resp, err := a.oapiClient.ListPrivateNetworksWithResponse(ctx)
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return *resp.JSON200.PrivateNetworks, nil
}

func (a *PrivateNetworks) Get(ctx context.Context, id openapi_types.UUID) (*oapi.PrivateNetwork, error) {
	resp, err := a.oapiClient.GetPrivateNetworkWithResponse(ctx, id)
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *PrivateNetworks) Create(ctx context.Context, body oapi.CreatePrivateNetworkJSONRequestBody) (*oapi.Operation, error) {
	resp, err := a.oapiClient.CreatePrivateNetworkWithResponse(ctx, body)
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *PrivateNetworks) Update(ctx context.Context, id openapi_types.UUID, body oapi.UpdatePrivateNetworkJSONRequestBody) (*oapi.Operation, error) {
	resp, err := a.oapiClient.UpdatePrivateNetworkWithResponse(ctx, id, body)
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *PrivateNetworks) Delete(ctx context.Context, id openapi_types.UUID) (*oapi.Operation, error) {
	resp, err := a.oapiClient.DeletePrivateNetworkWithResponse(ctx, id)
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

