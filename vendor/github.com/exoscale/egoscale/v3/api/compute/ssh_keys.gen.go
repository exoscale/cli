// Code generated by v3/generator; DO NOT EDIT.
package compute

import (
	"context"

	"github.com/exoscale/egoscale/v3/oapi"
	"github.com/exoscale/egoscale/v3/utils"
)

type SSHKeys struct {
	oapiClient *oapi.ClientWithResponses
}

func NewSSHKeys(c *oapi.ClientWithResponses) *SSHKeys {
	return &SSHKeys{c}
}

func (a *SSHKeys) List(ctx context.Context) ([]oapi.SshKey, error) {
	resp, err := a.oapiClient.ListSshKeysWithResponse(ctx)
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return *resp.JSON200.SshKeys, nil
}

func (a *SSHKeys) Register(ctx context.Context, body oapi.RegisterSshKeyJSONRequestBody) (*oapi.Operation, error) {
	resp, err := a.oapiClient.RegisterSshKeyWithResponse(ctx, body)
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *SSHKeys) Delete(ctx context.Context, name string) (*oapi.Operation, error) {
	resp, err := a.oapiClient.DeleteSshKeyWithResponse(ctx, name)
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *SSHKeys) Get(ctx context.Context, name string) (*oapi.SshKey, error) {
	resp, err := a.oapiClient.GetSshKeyWithResponse(ctx, name)
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

