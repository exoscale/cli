// Package v2 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v2

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
)

// AntiAffinityGroup defines model for anti-affinity-group.
type AntiAffinityGroup struct {
	Created     *time.Time              `json:"created,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Id          *string                 `json:"id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Tags        *AntiAffinityGroup_Tags `json:"tags,omitempty"`
}

// AntiAffinityGroup_Tags defines model for AntiAffinityGroup.Tags.
type AntiAffinityGroup_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ApiKey defines model for api-key.
type ApiKey struct {
	Created     *time.Time   `json:"created,omitempty"`
	Description *string      `json:"description,omitempty"`
	Key         *string      `json:"key,omitempty"`
	Operations  *[]string    `json:"operations,omitempty"`
	Secret      *string      `json:"secret,omitempty"`
	Tags        *ApiKey_Tags `json:"tags,omitempty"`
}

// ApiKey_Tags defines model for ApiKey.Tags.
type ApiKey_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ElasticIp defines model for elastic-ip.
type ElasticIp struct {
	Created     *time.Time      `json:"created,omitempty"`
	Description *string         `json:"description,omitempty"`
	Healthcheck *Healthcheck    `json:"healthcheck,omitempty"`
	Id          *string         `json:"id,omitempty"`
	Mode        *string         `json:"mode,omitempty"`
	ReverseDns  *string         `json:"reverse-dns,omitempty"`
	State       *string         `json:"state,omitempty"`
	Tags        *ElasticIp_Tags `json:"tags,omitempty"`
}

// ElasticIp_Tags defines model for ElasticIp.Tags.
type ElasticIp_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Event defines model for event.
type Event struct {
	Id         *string        `json:"id,omitempty"`
	Initiatior *string        `json:"initiatior,omitempty"`
	Operation  *string        `json:"operation,omitempty"`
	Payload    *Event_Payload `json:"payload,omitempty"`
	Timestamp  *time.Time     `json:"timestamp,omitempty"`
	Type       *string        `json:"type,omitempty"`
}

// Event_Payload defines model for Event.Payload.
type Event_Payload struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Healthcheck defines model for healthcheck.
type Healthcheck struct {
	Interval *int64  `json:"interval,omitempty"`
	Mode     *string `json:"mode,omitempty"`
	Port     *int64  `json:"port,omitempty"`
	Retries  *int64  `json:"retries,omitempty"`
	Timeout  *int64  `json:"timeout,omitempty"`
	Uri      *string `json:"uri,omitempty"`
}

// Instance defines model for instance.
type Instance struct {
	CreatedAt      *time.Time     `json:"created-at,omitempty"`
	Description    *string        `json:"description,omitempty"`
	DiskSize       *interface{}   `json:"disk-size,omitempty"`
	Id             *string        `json:"id,omitempty"`
	InstanceType   *InstanceType  `json:"instance-type,omitempty"`
	Locks          *[]Lock        `json:"locks,omitempty"`
	Name           *string        `json:"name,omitempty"`
	SecurityGroups *[]Resource    `json:"security-groups,omitempty"`
	Snapshots      *[]Resource    `json:"snapshots,omitempty"`
	SshKey         *string        `json:"ssh-key,omitempty"`
	State          *InstanceState `json:"state,omitempty"`
	Tags           *Instance_Tags `json:"tags,omitempty"`
	Template       *TemplateSpec  `json:"template,omitempty"`
	UserData       *string        `json:"user-data,omitempty"`
}

// Instance_Tags defines model for Instance.Tags.
type Instance_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// InstancePool defines model for instance-pool.
type InstancePool struct {
	CreatedAt      *time.Time         `json:"created-at,omitempty"`
	Description    *string            `json:"description,omitempty"`
	DiskSize       *interface{}       `json:"disk-size,omitempty"`
	Id             *string            `json:"id,omitempty"`
	InstanceType   *InstanceType      `json:"instance-type,omitempty"`
	Locks          *[]Lock            `json:"locks,omitempty"`
	Name           *string            `json:"name,omitempty"`
	SecurityGroups *[]Resource        `json:"security-groups,omitempty"`
	SshKey         *string            `json:"ssh-key,omitempty"`
	State          *string            `json:"state,omitempty"`
	Tags           *InstancePool_Tags `json:"tags,omitempty"`
	Template       *TemplateSpec      `json:"template,omitempty"`
	Topology       *Topology          `json:"topology,omitempty"`
	UserData       *string            `json:"user-data,omitempty"`
}

// InstancePool_Tags defines model for InstancePool.Tags.
type InstancePool_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// InstanceState defines model for instance-state.
type InstanceState string

// InstanceType defines model for instance-type.
type InstanceType struct {
	Cpu         *int64  `json:"cpu,omitempty"`
	Description *string `json:"description,omitempty"`
	Family      *string `json:"family,omitempty"`
	Memory      *int64  `json:"memory,omitempty"`
	Size        *string `json:"size,omitempty"`
}

// LoadBalancer defines model for load-balancer.
type LoadBalancer struct {
	CreatedAt   *time.Time             `json:"created-at,omitempty"`
	Description *string                `json:"description,omitempty"`
	Id          *string                `json:"id,omitempty"`
	Ip          *string                `json:"ip,omitempty"`
	Name        *string                `json:"name,omitempty"`
	Services    *[]LoadBalancerService `json:"services,omitempty"`
	State       *string                `json:"state,omitempty"`
}

// LoadBalancerServerStatus defines model for load-balancer-server-status.
type LoadBalancerServerStatus struct {
	PublicIp *string `json:"public-ip,omitempty"`
	Status   *string `json:"status,omitempty"`
}

// LoadBalancerService defines model for load-balancer-service.
type LoadBalancerService struct {
	Description       *string                     `json:"description,omitempty"`
	Healthcheck       *Healthcheck                `json:"healthcheck,omitempty"`
	HealthcheckStatus *[]LoadBalancerServerStatus `json:"healthcheck-status,omitempty"`
	Id                *string                     `json:"id,omitempty"`
	InstancePool      *Resource                   `json:"instance-pool,omitempty"`
	Name              *string                     `json:"name,omitempty"`
	Port              *int64                      `json:"port,omitempty"`
	Protocol          *string                     `json:"protocol,omitempty"`
	State             *string                     `json:"state,omitempty"`
	Strategy          *string                     `json:"strategy,omitempty"`
	TargetPort        *int64                      `json:"target-port,omitempty"`
}

// Lock defines model for lock.
type Lock struct {
	Id           *string `json:"id,omitempty"`
	ResourceId   *string `json:"resource-id,omitempty"`
	ResourceType *string `json:"resource-type,omitempty"`
}

// Resource defines model for resource.
type Resource struct {
	Command *string `json:"command,omitempty"`
	Id      *string `json:"id,omitempty"`
	Link    *string `json:"link,omitempty"`
}

// Result defines model for result.
type Result struct {
	Id        *string   `json:"id,omitempty"`
	Message   *string   `json:"message,omitempty"`
	Reason    *string   `json:"reason,omitempty"`
	Reference *Resource `json:"reference,omitempty"`
	State     *string   `json:"state,omitempty"`
}

// ReverseDns defines model for reverse-dns.
type ReverseDns struct {
	Hostname *string `json:"hostname,omitempty"`
}

// SecurityGroup defines model for security-group.
type SecurityGroup struct {
	CreatedAt   *time.Time           `json:"created-at,omitempty"`
	Description *string              `json:"description,omitempty"`
	Id          *string              `json:"id,omitempty"`
	Name        *string              `json:"name,omitempty"`
	Rules       *[]SecurityGroupRule `json:"rules,omitempty"`
	Tags        *SecurityGroup_Tags  `json:"tags,omitempty"`
}

// SecurityGroup_Tags defines model for SecurityGroup.Tags.
type SecurityGroup_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SecurityGroupRule defines model for security-group-rule.
type SecurityGroupRule struct {
	Cidrs       *[]string `json:"cidrs,omitempty"`
	Description *string   `json:"description,omitempty"`
	Direction   *string   `json:"direction,omitempty"`
	Icmp        *struct {
		Code *int64 `json:"code,omitempty"`
		Type *int64 `json:"type,omitempty"`
	} `json:"icmp,omitempty"`
	Id             *string     `json:"id,omitempty"`
	Ports          *string     `json:"ports,omitempty"`
	Protocol       *string     `json:"protocol,omitempty"`
	SecurityGroups *[]Resource `json:"security-groups,omitempty"`
}

// Snapshot defines model for snapshot.
type Snapshot struct {
	CreatedAt   *time.Time     `json:"created-at,omitempty"`
	Description *string        `json:"description,omitempty"`
	Id          *string        `json:"id,omitempty"`
	Instance    *Resource      `json:"instance,omitempty"`
	Name        *string        `json:"name,omitempty"`
	State       *string        `json:"state,omitempty"`
	Tags        *Snapshot_Tags `json:"tags,omitempty"`
}

// Snapshot_Tags defines model for Snapshot.Tags.
type Snapshot_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SshKey defines model for ssh-key.
type SshKey struct {
	CreatedAt   *time.Time   `json:"created-at,omitempty"`
	Description *string      `json:"description,omitempty"`
	Fingerprint *string      `json:"fingerprint,omitempty"`
	Name        *string      `json:"name,omitempty"`
	PrivateKey  *string      `json:"private-key,omitempty"`
	PublicKey   *string      `json:"public-key,omitempty"`
	Tags        *SshKey_Tags `json:"tags,omitempty"`
}

// SshKey_Tags defines model for SshKey.Tags.
type SshKey_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Template defines model for template.
type Template struct {
	Build           *string       `json:"build,omitempty"`
	CreatedAt       *time.Time    `json:"created-at,omitempty"`
	DefaultUser     *string       `json:"default-user,omitempty"`
	Description     *string       `json:"description,omitempty"`
	Id              *string       `json:"id,omitempty"`
	Name            *string       `json:"name,omitempty"`
	Os              *TemplateSpec `json:"os,omitempty"`
	PasswordEnabled *bool         `json:"password-enabled,omitempty"`
	Protocols       *struct {
		Name *string `json:"name,omitempty"`
		Port *string `json:"port,omitempty"`
	} `json:"protocols,omitempty"`
	Restrictions *struct {
		InstanceTypes *[]InstanceType `json:"instance-types,omitempty"`
		Size          *struct {
			Max *int64 `json:"max,omitempty"`
			Min *int64 `json:"min,omitempty"`
		} `json:"size,omitempty"`
	} `json:"restrictions,omitempty"`
	Tags       *Template_Tags `json:"tags,omitempty"`
	Url        *string        `json:"url,omitempty"`
	Visibility *string        `json:"visibility,omitempty"`
}

// Template_Tags defines model for Template.Tags.
type Template_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// TemplateSpec defines model for template-spec.
type TemplateSpec struct {
	Family  *string `json:"family,omitempty"`
	Id      *string `json:"id,omitempty"`
	Version *string `json:"version,omitempty"`
}

// TemplateVisibility defines model for template-visibility.
type TemplateVisibility string

// Topology defines model for topology.
type Topology struct {
	Size *int64  `json:"size,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Zone defines model for zone.
type Zone struct {
	Name *string `json:"name,omitempty"`
}

// CreateAntiAffinityGroupJSONBody defines parameters for CreateAntiAffinityGroup.
type CreateAntiAffinityGroupJSONBody Resource

// UpdateAntiAffinityGroupDescriptionJSONBody defines parameters for UpdateAntiAffinityGroupDescription.
type UpdateAntiAffinityGroupDescriptionJSONBody struct {
	Description *string `json:"description,omitempty"`
}

// GenerateApiKeyJSONBody defines parameters for GenerateApiKey.
type GenerateApiKeyJSONBody ApiKey

// ImportSshKeyJSONBody defines parameters for ImportSshKey.
type ImportSshKeyJSONBody ApiKey

// AllocateElasticIpJSONBody defines parameters for AllocateElasticIp.
type AllocateElasticIpJSONBody ElasticIp

// UpdateElasticIpHealthcheckJSONBody defines parameters for UpdateElasticIpHealthcheck.
type UpdateElasticIpHealthcheckJSONBody Healthcheck

// RemoveElasticIpReverseDnsJSONBody defines parameters for RemoveElasticIpReverseDns.
type RemoveElasticIpReverseDnsJSONBody ReverseDns

// UpdateElasticIpReverseDnsJSONBody defines parameters for UpdateElasticIpReverseDns.
type UpdateElasticIpReverseDnsJSONBody ReverseDns

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	From *time.Time `json:"from,omitempty"`
	Max  *int64     `json:"max,omitempty"`
}

// ListInstancesParams defines parameters for ListInstances.
type ListInstancesParams struct {
	State *InstanceState `json:"state,omitempty"`
}

// CreateInstanceJSONBody defines parameters for CreateInstance.
type CreateInstanceJSONBody Instance

// CreateInstanceParams defines parameters for CreateInstance.
type CreateInstanceParams struct {
	Start *bool `json:"start,omitempty"`
}

// CreateInstancePoolJSONBody defines parameters for CreateInstancePool.
type CreateInstancePoolJSONBody InstancePool

// UpdateInstancePoolDescriptionJSONBody defines parameters for UpdateInstancePoolDescription.
type UpdateInstancePoolDescriptionJSONBody struct {
	Description *string `json:"description,omitempty"`
}

// UpdateInstancePoolTemplateJSONBody defines parameters for UpdateInstancePoolTemplate.
type UpdateInstancePoolTemplateJSONBody struct {
	Template *TemplateSpec `json:"template,omitempty"`
}

// UpdateInstancePoolTopologyJSONBody defines parameters for UpdateInstancePoolTopology.
type UpdateInstancePoolTopologyJSONBody Topology

// UpdateInstancePoolUserDataJSONBody defines parameters for UpdateInstancePoolUserData.
type UpdateInstancePoolUserDataJSONBody struct {
	UserData *string `json:"user-data,omitempty"`
}

// AttachElasticIpOnInstanceJSONBody defines parameters for AttachElasticIpOnInstance.
type AttachElasticIpOnInstanceJSONBody struct {
	ElasticIp *string `json:"elastic-ip,omitempty"`
}

// UpdateInstanceDescriptionJSONBody defines parameters for UpdateInstanceDescription.
type UpdateInstanceDescriptionJSONBody struct {
	Description *string `json:"description,omitempty"`
}

// DetachElasticIpFromInstanceJSONBody defines parameters for DetachElasticIpFromInstance.
type DetachElasticIpFromInstanceJSONBody struct {
	ElasticIp *string `json:"elastic-ip,omitempty"`
}

// UpdateInstanceTypeJSONBody defines parameters for UpdateInstanceType.
type UpdateInstanceTypeJSONBody struct {
	InstanceType *InstanceType `json:"instance-type,omitempty"`
}

// RestoreInstanceFromSnapshotJSONBody defines parameters for RestoreInstanceFromSnapshot.
type RestoreInstanceFromSnapshotJSONBody struct {
	Snapshot *string `json:"snapshot,omitempty"`
}

// RestoreInstanceFromTemplateJSONBody defines parameters for RestoreInstanceFromTemplate.
type RestoreInstanceFromTemplateJSONBody struct {
	Template *TemplateSpec `json:"template,omitempty"`
}

// UpdateInstanceReverseDnsJSONBody defines parameters for UpdateInstanceReverseDns.
type UpdateInstanceReverseDnsJSONBody struct {
	ReverseDns *string `json:"reverse-dns,omitempty"`
}

// UpdateInstanceSecurityGroupsJSONBody defines parameters for UpdateInstanceSecurityGroups.
type UpdateInstanceSecurityGroupsJSONBody struct {
	SecurityGroups *[]struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"security-groups,omitempty"`
}

// StartInstanceParams defines parameters for StartInstance.
type StartInstanceParams struct {
	RemoveCpus *int64 `json:"remove-cpus,omitempty"`
}

// UpdateInstanceUserDataJSONBody defines parameters for UpdateInstanceUserData.
type UpdateInstanceUserDataJSONBody struct {
	UserData *string `json:"user-data,omitempty"`
}

// CreateLoadBalancerJSONBody defines parameters for CreateLoadBalancer.
type CreateLoadBalancerJSONBody LoadBalancer

// UpdateLoadBalancerJSONBody defines parameters for UpdateLoadBalancer.
type UpdateLoadBalancerJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// AddServiceToLoadBalancerJSONBody defines parameters for AddServiceToLoadBalancer.
type AddServiceToLoadBalancerJSONBody LoadBalancerService

// UpdateLoadBalancerServiceJSONBody defines parameters for UpdateLoadBalancerService.
type UpdateLoadBalancerServiceJSONBody struct {
	Description *string      `json:"description,omitempty"`
	Healthcheck *Healthcheck `json:"healthcheck,omitempty"`
	Name        *string      `json:"name,omitempty"`
	Port        *int64       `json:"port,omitempty"`
	Protocol    *string      `json:"protocol,omitempty"`
	Strategy    *string      `json:"strategy,omitempty"`
	TargetPort  *int64       `json:"target-port,omitempty"`
}

// CreateSecurityGroupJSONBody defines parameters for CreateSecurityGroup.
type CreateSecurityGroupJSONBody Resource

// AddRuleToSecurityGroupJSONBody defines parameters for AddRuleToSecurityGroup.
type AddRuleToSecurityGroupJSONBody struct {
	Rule *SecurityGroupRule `json:"rule,omitempty"`
}

// UpdateSecurityGroupDescriptionJSONBody defines parameters for UpdateSecurityGroupDescription.
type UpdateSecurityGroupDescriptionJSONBody struct {
	Description *string `json:"description,omitempty"`
}

// UpdateSecurityGroupRulesJSONBody defines parameters for UpdateSecurityGroupRules.
type UpdateSecurityGroupRulesJSONBody struct {
	Rules *[]SecurityGroupRule `json:"rules,omitempty"`
}

// UpdateSnapshotDescriptionJSONBody defines parameters for UpdateSnapshotDescription.
type UpdateSnapshotDescriptionJSONBody struct {
	Description *string `json:"description,omitempty"`
}

// ListTemplatesParams defines parameters for ListTemplates.
type ListTemplatesParams struct {
	Visibility   *TemplateVisibility `json:"visibility,omitempty"`
	Family       *string             `json:"family,omitempty"`
	Version      *string             `json:"version,omitempty"`
	ShowReleases *bool               `json:"show-releases,omitempty"`
}

// RegisterTemplateJSONBody defines parameters for RegisterTemplate.
type RegisterTemplateJSONBody Template

// CreateAntiAffinityGroupRequestBody defines body for CreateAntiAffinityGroup for application/json ContentType.
type CreateAntiAffinityGroupJSONRequestBody CreateAntiAffinityGroupJSONBody

// UpdateAntiAffinityGroupDescriptionRequestBody defines body for UpdateAntiAffinityGroupDescription for application/json ContentType.
type UpdateAntiAffinityGroupDescriptionJSONRequestBody UpdateAntiAffinityGroupDescriptionJSONBody

// GenerateApiKeyRequestBody defines body for GenerateApiKey for application/json ContentType.
type GenerateApiKeyJSONRequestBody GenerateApiKeyJSONBody

// ImportSshKeyRequestBody defines body for ImportSshKey for application/json ContentType.
type ImportSshKeyJSONRequestBody ImportSshKeyJSONBody

// AllocateElasticIpRequestBody defines body for AllocateElasticIp for application/json ContentType.
type AllocateElasticIpJSONRequestBody AllocateElasticIpJSONBody

// UpdateElasticIpHealthcheckRequestBody defines body for UpdateElasticIpHealthcheck for application/json ContentType.
type UpdateElasticIpHealthcheckJSONRequestBody UpdateElasticIpHealthcheckJSONBody

// RemoveElasticIpReverseDnsRequestBody defines body for RemoveElasticIpReverseDns for application/json ContentType.
type RemoveElasticIpReverseDnsJSONRequestBody RemoveElasticIpReverseDnsJSONBody

// UpdateElasticIpReverseDnsRequestBody defines body for UpdateElasticIpReverseDns for application/json ContentType.
type UpdateElasticIpReverseDnsJSONRequestBody UpdateElasticIpReverseDnsJSONBody

// CreateInstanceRequestBody defines body for CreateInstance for application/json ContentType.
type CreateInstanceJSONRequestBody CreateInstanceJSONBody

// CreateInstancePoolRequestBody defines body for CreateInstancePool for application/json ContentType.
type CreateInstancePoolJSONRequestBody CreateInstancePoolJSONBody

// UpdateInstancePoolDescriptionRequestBody defines body for UpdateInstancePoolDescription for application/json ContentType.
type UpdateInstancePoolDescriptionJSONRequestBody UpdateInstancePoolDescriptionJSONBody

// UpdateInstancePoolTemplateRequestBody defines body for UpdateInstancePoolTemplate for application/json ContentType.
type UpdateInstancePoolTemplateJSONRequestBody UpdateInstancePoolTemplateJSONBody

// UpdateInstancePoolTopologyRequestBody defines body for UpdateInstancePoolTopology for application/json ContentType.
type UpdateInstancePoolTopologyJSONRequestBody UpdateInstancePoolTopologyJSONBody

// UpdateInstancePoolUserDataRequestBody defines body for UpdateInstancePoolUserData for application/json ContentType.
type UpdateInstancePoolUserDataJSONRequestBody UpdateInstancePoolUserDataJSONBody

// AttachElasticIpOnInstanceRequestBody defines body for AttachElasticIpOnInstance for application/json ContentType.
type AttachElasticIpOnInstanceJSONRequestBody AttachElasticIpOnInstanceJSONBody

// UpdateInstanceDescriptionRequestBody defines body for UpdateInstanceDescription for application/json ContentType.
type UpdateInstanceDescriptionJSONRequestBody UpdateInstanceDescriptionJSONBody

// DetachElasticIpFromInstanceRequestBody defines body for DetachElasticIpFromInstance for application/json ContentType.
type DetachElasticIpFromInstanceJSONRequestBody DetachElasticIpFromInstanceJSONBody

// UpdateInstanceTypeRequestBody defines body for UpdateInstanceType for application/json ContentType.
type UpdateInstanceTypeJSONRequestBody UpdateInstanceTypeJSONBody

// RestoreInstanceFromSnapshotRequestBody defines body for RestoreInstanceFromSnapshot for application/json ContentType.
type RestoreInstanceFromSnapshotJSONRequestBody RestoreInstanceFromSnapshotJSONBody

// RestoreInstanceFromTemplateRequestBody defines body for RestoreInstanceFromTemplate for application/json ContentType.
type RestoreInstanceFromTemplateJSONRequestBody RestoreInstanceFromTemplateJSONBody

// UpdateInstanceReverseDnsRequestBody defines body for UpdateInstanceReverseDns for application/json ContentType.
type UpdateInstanceReverseDnsJSONRequestBody UpdateInstanceReverseDnsJSONBody

// UpdateInstanceSecurityGroupsRequestBody defines body for UpdateInstanceSecurityGroups for application/json ContentType.
type UpdateInstanceSecurityGroupsJSONRequestBody UpdateInstanceSecurityGroupsJSONBody

// UpdateInstanceUserDataRequestBody defines body for UpdateInstanceUserData for application/json ContentType.
type UpdateInstanceUserDataJSONRequestBody UpdateInstanceUserDataJSONBody

// CreateLoadBalancerRequestBody defines body for CreateLoadBalancer for application/json ContentType.
type CreateLoadBalancerJSONRequestBody CreateLoadBalancerJSONBody

// UpdateLoadBalancerRequestBody defines body for UpdateLoadBalancer for application/json ContentType.
type UpdateLoadBalancerJSONRequestBody UpdateLoadBalancerJSONBody

// AddServiceToLoadBalancerRequestBody defines body for AddServiceToLoadBalancer for application/json ContentType.
type AddServiceToLoadBalancerJSONRequestBody AddServiceToLoadBalancerJSONBody

// UpdateLoadBalancerServiceRequestBody defines body for UpdateLoadBalancerService for application/json ContentType.
type UpdateLoadBalancerServiceJSONRequestBody UpdateLoadBalancerServiceJSONBody

// CreateSecurityGroupRequestBody defines body for CreateSecurityGroup for application/json ContentType.
type CreateSecurityGroupJSONRequestBody CreateSecurityGroupJSONBody

// AddRuleToSecurityGroupRequestBody defines body for AddRuleToSecurityGroup for application/json ContentType.
type AddRuleToSecurityGroupJSONRequestBody AddRuleToSecurityGroupJSONBody

// UpdateSecurityGroupDescriptionRequestBody defines body for UpdateSecurityGroupDescription for application/json ContentType.
type UpdateSecurityGroupDescriptionJSONRequestBody UpdateSecurityGroupDescriptionJSONBody

// UpdateSecurityGroupRulesRequestBody defines body for UpdateSecurityGroupRules for application/json ContentType.
type UpdateSecurityGroupRulesJSONRequestBody UpdateSecurityGroupRulesJSONBody

// UpdateSnapshotDescriptionRequestBody defines body for UpdateSnapshotDescription for application/json ContentType.
type UpdateSnapshotDescriptionJSONRequestBody UpdateSnapshotDescriptionJSONBody

// RegisterTemplateRequestBody defines body for RegisterTemplate for application/json ContentType.
type RegisterTemplateJSONRequestBody RegisterTemplateJSONBody

// Getter for additional properties for AntiAffinityGroup_Tags. Returns the specified
// element and whether it was found
func (a AntiAffinityGroup_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AntiAffinityGroup_Tags
func (a *AntiAffinityGroup_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AntiAffinityGroup_Tags to handle AdditionalProperties
func (a *AntiAffinityGroup_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AntiAffinityGroup_Tags to handle AdditionalProperties
func (a AntiAffinityGroup_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApiKey_Tags. Returns the specified
// element and whether it was found
func (a ApiKey_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApiKey_Tags
func (a *ApiKey_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApiKey_Tags to handle AdditionalProperties
func (a *ApiKey_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApiKey_Tags to handle AdditionalProperties
func (a ApiKey_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ElasticIp_Tags. Returns the specified
// element and whether it was found
func (a ElasticIp_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ElasticIp_Tags
func (a *ElasticIp_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ElasticIp_Tags to handle AdditionalProperties
func (a *ElasticIp_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ElasticIp_Tags to handle AdditionalProperties
func (a ElasticIp_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Event_Payload. Returns the specified
// element and whether it was found
func (a Event_Payload) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Event_Payload
func (a *Event_Payload) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Event_Payload to handle AdditionalProperties
func (a *Event_Payload) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Event_Payload to handle AdditionalProperties
func (a Event_Payload) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Instance_Tags. Returns the specified
// element and whether it was found
func (a Instance_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Instance_Tags
func (a *Instance_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Instance_Tags to handle AdditionalProperties
func (a *Instance_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Instance_Tags to handle AdditionalProperties
func (a Instance_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for InstancePool_Tags. Returns the specified
// element and whether it was found
func (a InstancePool_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InstancePool_Tags
func (a *InstancePool_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InstancePool_Tags to handle AdditionalProperties
func (a *InstancePool_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InstancePool_Tags to handle AdditionalProperties
func (a InstancePool_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SecurityGroup_Tags. Returns the specified
// element and whether it was found
func (a SecurityGroup_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SecurityGroup_Tags
func (a *SecurityGroup_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SecurityGroup_Tags to handle AdditionalProperties
func (a *SecurityGroup_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SecurityGroup_Tags to handle AdditionalProperties
func (a SecurityGroup_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Snapshot_Tags. Returns the specified
// element and whether it was found
func (a Snapshot_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Snapshot_Tags
func (a *Snapshot_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Snapshot_Tags to handle AdditionalProperties
func (a *Snapshot_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Snapshot_Tags to handle AdditionalProperties
func (a Snapshot_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SshKey_Tags. Returns the specified
// element and whether it was found
func (a SshKey_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SshKey_Tags
func (a *SshKey_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SshKey_Tags to handle AdditionalProperties
func (a *SshKey_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SshKey_Tags to handle AdditionalProperties
func (a SshKey_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Template_Tags. Returns the specified
// element and whether it was found
func (a Template_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Template_Tags
func (a *Template_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Template_Tags to handle AdditionalProperties
func (a *Template_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Template_Tags to handle AdditionalProperties
func (a Template_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Index request
	Index(ctx context.Context) (*http.Response, error)

	// ListAntiAffinityGroups request
	ListAntiAffinityGroups(ctx context.Context) (*http.Response, error)

	// CreateAntiAffinityGroup request  with any body
	CreateAntiAffinityGroupWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateAntiAffinityGroup(ctx context.Context, body CreateAntiAffinityGroupJSONRequestBody) (*http.Response, error)

	// DestroyAntiAffinityGroup request
	DestroyAntiAffinityGroup(ctx context.Context, id string) (*http.Response, error)

	// UpdateAntiAffinityGroupDescription request  with any body
	UpdateAntiAffinityGroupDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateAntiAffinityGroupDescription(ctx context.Context, id string, body UpdateAntiAffinityGroupDescriptionJSONRequestBody) (*http.Response, error)

	// ListAntiAffinityGroupInstances request
	ListAntiAffinityGroupInstances(ctx context.Context, id string) (*http.Response, error)

	// ListApiKeys request
	ListApiKeys(ctx context.Context) (*http.Response, error)

	// GenerateApiKey request  with any body
	GenerateApiKeyWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	GenerateApiKey(ctx context.Context, body GenerateApiKeyJSONRequestBody) (*http.Response, error)

	// RevokeApiKey request
	RevokeApiKey(ctx context.Context, key string) (*http.Response, error)

	// GetApiKey request
	GetApiKey(ctx context.Context, key string) (*http.Response, error)

	// GenerateSshKey request
	GenerateSshKey(ctx context.Context) (*http.Response, error)

	// ImportSshKey request  with any body
	ImportSshKeyWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	ImportSshKey(ctx context.Context, body ImportSshKeyJSONRequestBody) (*http.Response, error)

	// ListElasticIps request
	ListElasticIps(ctx context.Context) (*http.Response, error)

	// AllocateElasticIp request  with any body
	AllocateElasticIpWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	AllocateElasticIp(ctx context.Context, body AllocateElasticIpJSONRequestBody) (*http.Response, error)

	// ReleaseElasticIp request
	ReleaseElasticIp(ctx context.Context, id string) (*http.Response, error)

	// GetElasticIp request
	GetElasticIp(ctx context.Context, id string) (*http.Response, error)

	// UpdateElasticIpHealthcheck request  with any body
	UpdateElasticIpHealthcheckWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateElasticIpHealthcheck(ctx context.Context, id string, body UpdateElasticIpHealthcheckJSONRequestBody) (*http.Response, error)

	// RemoveElasticIpReverseDns request  with any body
	RemoveElasticIpReverseDnsWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	RemoveElasticIpReverseDns(ctx context.Context, id string, body RemoveElasticIpReverseDnsJSONRequestBody) (*http.Response, error)

	// UpdateElasticIpReverseDns request  with any body
	UpdateElasticIpReverseDnsWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateElasticIpReverseDns(ctx context.Context, id string, body UpdateElasticIpReverseDnsJSONRequestBody) (*http.Response, error)

	// ListEvents request
	ListEvents(ctx context.Context, params *ListEventsParams) (*http.Response, error)

	// ListInstances request
	ListInstances(ctx context.Context, params *ListInstancesParams) (*http.Response, error)

	// CreateInstance request  with any body
	CreateInstanceWithBody(ctx context.Context, params *CreateInstanceParams, contentType string, body io.Reader) (*http.Response, error)

	CreateInstance(ctx context.Context, params *CreateInstanceParams, body CreateInstanceJSONRequestBody) (*http.Response, error)

	// ListInstancePools request
	ListInstancePools(ctx context.Context) (*http.Response, error)

	// CreateInstancePool request  with any body
	CreateInstancePoolWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateInstancePool(ctx context.Context, body CreateInstancePoolJSONRequestBody) (*http.Response, error)

	// DestroyInstancePool request
	DestroyInstancePool(ctx context.Context, id string) (*http.Response, error)

	// GetInstancePool request
	GetInstancePool(ctx context.Context, id string) (*http.Response, error)

	// UpdateInstancePoolDescription request  with any body
	UpdateInstancePoolDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateInstancePoolDescription(ctx context.Context, id string, body UpdateInstancePoolDescriptionJSONRequestBody) (*http.Response, error)

	// UpdateInstancePoolTemplate request  with any body
	UpdateInstancePoolTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateInstancePoolTemplate(ctx context.Context, id string, body UpdateInstancePoolTemplateJSONRequestBody) (*http.Response, error)

	// UpdateInstancePoolTopology request  with any body
	UpdateInstancePoolTopologyWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateInstancePoolTopology(ctx context.Context, id string, body UpdateInstancePoolTopologyJSONRequestBody) (*http.Response, error)

	// UpdateInstancePoolUserData request  with any body
	UpdateInstancePoolUserDataWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateInstancePoolUserData(ctx context.Context, id string, body UpdateInstancePoolUserDataJSONRequestBody) (*http.Response, error)

	// ListInstanceTypes request
	ListInstanceTypes(ctx context.Context) (*http.Response, error)

	// DestroyInstance request
	DestroyInstance(ctx context.Context, id string) (*http.Response, error)

	// GetInstance request
	GetInstance(ctx context.Context, id string) (*http.Response, error)

	// AllocateIpv6OnInstance request
	AllocateIpv6OnInstance(ctx context.Context, id string) (*http.Response, error)

	// AttachElasticIpOnInstance request  with any body
	AttachElasticIpOnInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	AttachElasticIpOnInstance(ctx context.Context, id string, body AttachElasticIpOnInstanceJSONRequestBody) (*http.Response, error)

	// CreateSnapshot request
	CreateSnapshot(ctx context.Context, id string) (*http.Response, error)

	// UpdateInstanceDescription request  with any body
	UpdateInstanceDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateInstanceDescription(ctx context.Context, id string, body UpdateInstanceDescriptionJSONRequestBody) (*http.Response, error)

	// DetachElasticIpFromInstance request  with any body
	DetachElasticIpFromInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	DetachElasticIpFromInstance(ctx context.Context, id string, body DetachElasticIpFromInstanceJSONRequestBody) (*http.Response, error)

	// UpdateInstanceType request  with any body
	UpdateInstanceTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateInstanceType(ctx context.Context, id string, body UpdateInstanceTypeJSONRequestBody) (*http.Response, error)

	// RebootInstance request
	RebootInstance(ctx context.Context, id string) (*http.Response, error)

	// ResetInstancePassword request
	ResetInstancePassword(ctx context.Context, id string) (*http.Response, error)

	// RestoreInstanceFromSnapshot request  with any body
	RestoreInstanceFromSnapshotWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	RestoreInstanceFromSnapshot(ctx context.Context, id string, body RestoreInstanceFromSnapshotJSONRequestBody) (*http.Response, error)

	// RestoreInstanceFromTemplate request  with any body
	RestoreInstanceFromTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	RestoreInstanceFromTemplate(ctx context.Context, id string, body RestoreInstanceFromTemplateJSONRequestBody) (*http.Response, error)

	// RemoveInstanceReverseDns request
	RemoveInstanceReverseDns(ctx context.Context, id string) (*http.Response, error)

	// UpdateInstanceReverseDns request  with any body
	UpdateInstanceReverseDnsWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateInstanceReverseDns(ctx context.Context, id string, body UpdateInstanceReverseDnsJSONRequestBody) (*http.Response, error)

	// UpdateInstanceSecurityGroups request  with any body
	UpdateInstanceSecurityGroupsWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateInstanceSecurityGroups(ctx context.Context, id string, body UpdateInstanceSecurityGroupsJSONRequestBody) (*http.Response, error)

	// StartInstance request
	StartInstance(ctx context.Context, id string, params *StartInstanceParams) (*http.Response, error)

	// StopInstance request
	StopInstance(ctx context.Context, id string) (*http.Response, error)

	// UpdateInstanceUserData request  with any body
	UpdateInstanceUserDataWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateInstanceUserData(ctx context.Context, id string, body UpdateInstanceUserDataJSONRequestBody) (*http.Response, error)

	// ListLoadBalancers request
	ListLoadBalancers(ctx context.Context) (*http.Response, error)

	// CreateLoadBalancer request  with any body
	CreateLoadBalancerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateLoadBalancer(ctx context.Context, body CreateLoadBalancerJSONRequestBody) (*http.Response, error)

	// DestroyLoadBalancer request
	DestroyLoadBalancer(ctx context.Context, id string) (*http.Response, error)

	// GetLoadBalancer request
	GetLoadBalancer(ctx context.Context, id string) (*http.Response, error)

	// UpdateLoadBalancer request  with any body
	UpdateLoadBalancerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateLoadBalancer(ctx context.Context, id string, body UpdateLoadBalancerJSONRequestBody) (*http.Response, error)

	// AddServiceToLoadBalancer request  with any body
	AddServiceToLoadBalancerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	AddServiceToLoadBalancer(ctx context.Context, id string, body AddServiceToLoadBalancerJSONRequestBody) (*http.Response, error)

	// DeleteLoadBalancerService request
	DeleteLoadBalancerService(ctx context.Context, id string, serviceId string) (*http.Response, error)

	// GetLoadBalancerService request
	GetLoadBalancerService(ctx context.Context, id string, serviceId string) (*http.Response, error)

	// UpdateLoadBalancerService request  with any body
	UpdateLoadBalancerServiceWithBody(ctx context.Context, id string, serviceId string, contentType string, body io.Reader) (*http.Response, error)

	UpdateLoadBalancerService(ctx context.Context, id string, serviceId string, body UpdateLoadBalancerServiceJSONRequestBody) (*http.Response, error)

	// Ping request
	Ping(ctx context.Context) (*http.Response, error)

	// ListResults request
	ListResults(ctx context.Context) (*http.Response, error)

	// GetResult request
	GetResult(ctx context.Context, id string) (*http.Response, error)

	// ListSecurityGroups request
	ListSecurityGroups(ctx context.Context) (*http.Response, error)

	// CreateSecurityGroup request  with any body
	CreateSecurityGroupWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateSecurityGroup(ctx context.Context, body CreateSecurityGroupJSONRequestBody) (*http.Response, error)

	// DestroySecurityGroup request
	DestroySecurityGroup(ctx context.Context, id string) (*http.Response, error)

	// GetSecurityGroup request
	GetSecurityGroup(ctx context.Context, id string) (*http.Response, error)

	// AddRuleToSecurityGroup request  with any body
	AddRuleToSecurityGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	AddRuleToSecurityGroup(ctx context.Context, id string, body AddRuleToSecurityGroupJSONRequestBody) (*http.Response, error)

	// DeleteRuleFromSecurityGroup request
	DeleteRuleFromSecurityGroup(ctx context.Context, id string, ruleId string) (*http.Response, error)

	// UpdateSecurityGroupDescription request  with any body
	UpdateSecurityGroupDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateSecurityGroupDescription(ctx context.Context, id string, body UpdateSecurityGroupDescriptionJSONRequestBody) (*http.Response, error)

	// ListSecurityGroupInstances request
	ListSecurityGroupInstances(ctx context.Context, id string) (*http.Response, error)

	// UpdateSecurityGroupRules request  with any body
	UpdateSecurityGroupRulesWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateSecurityGroupRules(ctx context.Context, id string, body UpdateSecurityGroupRulesJSONRequestBody) (*http.Response, error)

	// ListSnapshots request
	ListSnapshots(ctx context.Context) (*http.Response, error)

	// DestroySnapshot request
	DestroySnapshot(ctx context.Context, id string) (*http.Response, error)

	// GetSnapshot request
	GetSnapshot(ctx context.Context, id string) (*http.Response, error)

	// UpdateSnapshotDescription request  with any body
	UpdateSnapshotDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	UpdateSnapshotDescription(ctx context.Context, id string, body UpdateSnapshotDescriptionJSONRequestBody) (*http.Response, error)

	// ListSshKeys request
	ListSshKeys(ctx context.Context) (*http.Response, error)

	// DeleteSshKey request
	DeleteSshKey(ctx context.Context, name string) (*http.Response, error)

	// ListTemplates request
	ListTemplates(ctx context.Context, params *ListTemplatesParams) (*http.Response, error)

	// RegisterTemplate request  with any body
	RegisterTemplateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	RegisterTemplate(ctx context.Context, body RegisterTemplateJSONRequestBody) (*http.Response, error)

	// DestroyTemplate request
	DestroyTemplate(ctx context.Context, id string) (*http.Response, error)

	// Version request
	Version(ctx context.Context) (*http.Response, error)

	// ListZones request
	ListZones(ctx context.Context) (*http.Response, error)
}

func (c *Client) Index(ctx context.Context) (*http.Response, error) {
	req, err := NewIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListAntiAffinityGroups(ctx context.Context) (*http.Response, error) {
	req, err := NewListAntiAffinityGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAntiAffinityGroupWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateAntiAffinityGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAntiAffinityGroup(ctx context.Context, body CreateAntiAffinityGroupJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateAntiAffinityGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyAntiAffinityGroup(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDestroyAntiAffinityGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAntiAffinityGroupDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateAntiAffinityGroupDescriptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAntiAffinityGroupDescription(ctx context.Context, id string, body UpdateAntiAffinityGroupDescriptionJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateAntiAffinityGroupDescriptionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListAntiAffinityGroupInstances(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewListAntiAffinityGroupInstancesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListApiKeys(ctx context.Context) (*http.Response, error) {
	req, err := NewListApiKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateApiKeyWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGenerateApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateApiKey(ctx context.Context, body GenerateApiKeyJSONRequestBody) (*http.Response, error) {
	req, err := NewGenerateApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeApiKey(ctx context.Context, key string) (*http.Response, error) {
	req, err := NewRevokeApiKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKey(ctx context.Context, key string) (*http.Response, error) {
	req, err := NewGetApiKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateSshKey(ctx context.Context) (*http.Response, error) {
	req, err := NewGenerateSshKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ImportSshKeyWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewImportSshKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ImportSshKey(ctx context.Context, body ImportSshKeyJSONRequestBody) (*http.Response, error) {
	req, err := NewImportSshKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListElasticIps(ctx context.Context) (*http.Response, error) {
	req, err := NewListElasticIpsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AllocateElasticIpWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAllocateElasticIpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AllocateElasticIp(ctx context.Context, body AllocateElasticIpJSONRequestBody) (*http.Response, error) {
	req, err := NewAllocateElasticIpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseElasticIp(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewReleaseElasticIpRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetElasticIp(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetElasticIpRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElasticIpHealthcheckWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateElasticIpHealthcheckRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElasticIpHealthcheck(ctx context.Context, id string, body UpdateElasticIpHealthcheckJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateElasticIpHealthcheckRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveElasticIpReverseDnsWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRemoveElasticIpReverseDnsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveElasticIpReverseDns(ctx context.Context, id string, body RemoveElasticIpReverseDnsJSONRequestBody) (*http.Response, error) {
	req, err := NewRemoveElasticIpReverseDnsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElasticIpReverseDnsWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateElasticIpReverseDnsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElasticIpReverseDns(ctx context.Context, id string, body UpdateElasticIpReverseDnsJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateElasticIpReverseDnsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListEvents(ctx context.Context, params *ListEventsParams) (*http.Response, error) {
	req, err := NewListEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListInstances(ctx context.Context, params *ListInstancesParams) (*http.Response, error) {
	req, err := NewListInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInstanceWithBody(ctx context.Context, params *CreateInstanceParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateInstanceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInstance(ctx context.Context, params *CreateInstanceParams, body CreateInstanceJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateInstanceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListInstancePools(ctx context.Context) (*http.Response, error) {
	req, err := NewListInstancePoolsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInstancePoolWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateInstancePoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInstancePool(ctx context.Context, body CreateInstancePoolJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateInstancePoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyInstancePool(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDestroyInstancePoolRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancePool(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetInstancePoolRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstancePoolDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateInstancePoolDescriptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstancePoolDescription(ctx context.Context, id string, body UpdateInstancePoolDescriptionJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateInstancePoolDescriptionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstancePoolTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateInstancePoolTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstancePoolTemplate(ctx context.Context, id string, body UpdateInstancePoolTemplateJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateInstancePoolTemplateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstancePoolTopologyWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateInstancePoolTopologyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstancePoolTopology(ctx context.Context, id string, body UpdateInstancePoolTopologyJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateInstancePoolTopologyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstancePoolUserDataWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateInstancePoolUserDataRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstancePoolUserData(ctx context.Context, id string, body UpdateInstancePoolUserDataJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateInstancePoolUserDataRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListInstanceTypes(ctx context.Context) (*http.Response, error) {
	req, err := NewListInstanceTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyInstance(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDestroyInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstance(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AllocateIpv6OnInstance(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewAllocateIpv6OnInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AttachElasticIpOnInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAttachElasticIpOnInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AttachElasticIpOnInstance(ctx context.Context, id string, body AttachElasticIpOnInstanceJSONRequestBody) (*http.Response, error) {
	req, err := NewAttachElasticIpOnInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnapshot(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewCreateSnapshotRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstanceDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateInstanceDescriptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstanceDescription(ctx context.Context, id string, body UpdateInstanceDescriptionJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateInstanceDescriptionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DetachElasticIpFromInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDetachElasticIpFromInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DetachElasticIpFromInstance(ctx context.Context, id string, body DetachElasticIpFromInstanceJSONRequestBody) (*http.Response, error) {
	req, err := NewDetachElasticIpFromInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstanceTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateInstanceTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstanceType(ctx context.Context, id string, body UpdateInstanceTypeJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateInstanceTypeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RebootInstance(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewRebootInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ResetInstancePassword(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewResetInstancePasswordRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreInstanceFromSnapshotWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRestoreInstanceFromSnapshotRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreInstanceFromSnapshot(ctx context.Context, id string, body RestoreInstanceFromSnapshotJSONRequestBody) (*http.Response, error) {
	req, err := NewRestoreInstanceFromSnapshotRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreInstanceFromTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRestoreInstanceFromTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreInstanceFromTemplate(ctx context.Context, id string, body RestoreInstanceFromTemplateJSONRequestBody) (*http.Response, error) {
	req, err := NewRestoreInstanceFromTemplateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveInstanceReverseDns(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewRemoveInstanceReverseDnsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstanceReverseDnsWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateInstanceReverseDnsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstanceReverseDns(ctx context.Context, id string, body UpdateInstanceReverseDnsJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateInstanceReverseDnsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstanceSecurityGroupsWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateInstanceSecurityGroupsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstanceSecurityGroups(ctx context.Context, id string, body UpdateInstanceSecurityGroupsJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateInstanceSecurityGroupsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) StartInstance(ctx context.Context, id string, params *StartInstanceParams) (*http.Response, error) {
	req, err := NewStartInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) StopInstance(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewStopInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstanceUserDataWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateInstanceUserDataRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInstanceUserData(ctx context.Context, id string, body UpdateInstanceUserDataJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateInstanceUserDataRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListLoadBalancers(ctx context.Context) (*http.Response, error) {
	req, err := NewListLoadBalancersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLoadBalancerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateLoadBalancerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLoadBalancer(ctx context.Context, body CreateLoadBalancerJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateLoadBalancerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyLoadBalancer(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDestroyLoadBalancerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoadBalancer(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetLoadBalancerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLoadBalancerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateLoadBalancerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLoadBalancer(ctx context.Context, id string, body UpdateLoadBalancerJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateLoadBalancerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddServiceToLoadBalancerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddServiceToLoadBalancerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddServiceToLoadBalancer(ctx context.Context, id string, body AddServiceToLoadBalancerJSONRequestBody) (*http.Response, error) {
	req, err := NewAddServiceToLoadBalancerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLoadBalancerService(ctx context.Context, id string, serviceId string) (*http.Response, error) {
	req, err := NewDeleteLoadBalancerServiceRequest(c.Server, id, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoadBalancerService(ctx context.Context, id string, serviceId string) (*http.Response, error) {
	req, err := NewGetLoadBalancerServiceRequest(c.Server, id, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLoadBalancerServiceWithBody(ctx context.Context, id string, serviceId string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateLoadBalancerServiceRequestWithBody(c.Server, id, serviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLoadBalancerService(ctx context.Context, id string, serviceId string, body UpdateLoadBalancerServiceJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateLoadBalancerServiceRequest(c.Server, id, serviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) Ping(ctx context.Context) (*http.Response, error) {
	req, err := NewPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListResults(ctx context.Context) (*http.Response, error) {
	req, err := NewListResultsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetResult(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetResultRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListSecurityGroups(ctx context.Context) (*http.Response, error) {
	req, err := NewListSecurityGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecurityGroupWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSecurityGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecurityGroup(ctx context.Context, body CreateSecurityGroupJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSecurityGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DestroySecurityGroup(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDestroySecurityGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecurityGroup(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetSecurityGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddRuleToSecurityGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddRuleToSecurityGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddRuleToSecurityGroup(ctx context.Context, id string, body AddRuleToSecurityGroupJSONRequestBody) (*http.Response, error) {
	req, err := NewAddRuleToSecurityGroupRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRuleFromSecurityGroup(ctx context.Context, id string, ruleId string) (*http.Response, error) {
	req, err := NewDeleteRuleFromSecurityGroupRequest(c.Server, id, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecurityGroupDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSecurityGroupDescriptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecurityGroupDescription(ctx context.Context, id string, body UpdateSecurityGroupDescriptionJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSecurityGroupDescriptionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListSecurityGroupInstances(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewListSecurityGroupInstancesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecurityGroupRulesWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSecurityGroupRulesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecurityGroupRules(ctx context.Context, id string, body UpdateSecurityGroupRulesJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSecurityGroupRulesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListSnapshots(ctx context.Context) (*http.Response, error) {
	req, err := NewListSnapshotsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DestroySnapshot(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDestroySnapshotRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshot(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetSnapshotRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSnapshotDescriptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateSnapshotDescriptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSnapshotDescription(ctx context.Context, id string, body UpdateSnapshotDescriptionJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateSnapshotDescriptionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListSshKeys(ctx context.Context) (*http.Response, error) {
	req, err := NewListSshKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSshKey(ctx context.Context, name string) (*http.Response, error) {
	req, err := NewDeleteSshKeyRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListTemplates(ctx context.Context, params *ListTemplatesParams) (*http.Response, error) {
	req, err := NewListTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterTemplateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRegisterTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterTemplate(ctx context.Context, body RegisterTemplateJSONRequestBody) (*http.Response, error) {
	req, err := NewRegisterTemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyTemplate(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDestroyTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) Version(ctx context.Context) (*http.Response, error) {
	req, err := NewVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListZones(ctx context.Context) (*http.Response, error) {
	req, err := NewListZonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewIndexRequest generates requests for Index
func NewIndexRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAntiAffinityGroupsRequest generates requests for ListAntiAffinityGroups
func NewListAntiAffinityGroupsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/anti-affinity-group")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAntiAffinityGroupRequest calls the generic CreateAntiAffinityGroup builder with application/json body
func NewCreateAntiAffinityGroupRequest(server string, body CreateAntiAffinityGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAntiAffinityGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAntiAffinityGroupRequestWithBody generates requests for CreateAntiAffinityGroup with any type of body
func NewCreateAntiAffinityGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/anti-affinity-group")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDestroyAntiAffinityGroupRequest generates requests for DestroyAntiAffinityGroup
func NewDestroyAntiAffinityGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/anti-affinity-group/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAntiAffinityGroupDescriptionRequest calls the generic UpdateAntiAffinityGroupDescription builder with application/json body
func NewUpdateAntiAffinityGroupDescriptionRequest(server string, id string, body UpdateAntiAffinityGroupDescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAntiAffinityGroupDescriptionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAntiAffinityGroupDescriptionRequestWithBody generates requests for UpdateAntiAffinityGroupDescription with any type of body
func NewUpdateAntiAffinityGroupDescriptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/anti-affinity-group/%s:description", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListAntiAffinityGroupInstancesRequest generates requests for ListAntiAffinityGroupInstances
func NewListAntiAffinityGroupInstancesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/anti-affinity-group/%s:instances", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListApiKeysRequest generates requests for ListApiKeys
func NewListApiKeysRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api-key")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateApiKeyRequest calls the generic GenerateApiKey builder with application/json body
func NewGenerateApiKeyRequest(server string, body GenerateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateApiKeyRequestWithBody generates requests for GenerateApiKey with any type of body
func NewGenerateApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api-key")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRevokeApiKeyRequest generates requests for RevokeApiKey
func NewRevokeApiKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "key", key)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api-key/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiKeyRequest generates requests for GetApiKey
func NewGetApiKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "key", key)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api-key/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateSshKeyRequest generates requests for GenerateSshKey
func NewGenerateSshKeyRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api-key:generate")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImportSshKeyRequest calls the generic ImportSshKey builder with application/json body
func NewImportSshKeyRequest(server string, body ImportSshKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportSshKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewImportSshKeyRequestWithBody generates requests for ImportSshKey with any type of body
func NewImportSshKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api-key:import")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListElasticIpsRequest generates requests for ListElasticIps
func NewListElasticIpsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/elastic-ip")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocateElasticIpRequest calls the generic AllocateElasticIp builder with application/json body
func NewAllocateElasticIpRequest(server string, body AllocateElasticIpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAllocateElasticIpRequestWithBody(server, "application/json", bodyReader)
}

// NewAllocateElasticIpRequestWithBody generates requests for AllocateElasticIp with any type of body
func NewAllocateElasticIpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/elastic-ip")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReleaseElasticIpRequest generates requests for ReleaseElasticIp
func NewReleaseElasticIpRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/elastic-ip/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetElasticIpRequest generates requests for GetElasticIp
func NewGetElasticIpRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/elastic-ip/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateElasticIpHealthcheckRequest calls the generic UpdateElasticIpHealthcheck builder with application/json body
func NewUpdateElasticIpHealthcheckRequest(server string, id string, body UpdateElasticIpHealthcheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateElasticIpHealthcheckRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateElasticIpHealthcheckRequestWithBody generates requests for UpdateElasticIpHealthcheck with any type of body
func NewUpdateElasticIpHealthcheckRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/elastic-ip/%s:healthcheck", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRemoveElasticIpReverseDnsRequest calls the generic RemoveElasticIpReverseDns builder with application/json body
func NewRemoveElasticIpReverseDnsRequest(server string, id string, body RemoveElasticIpReverseDnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveElasticIpReverseDnsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRemoveElasticIpReverseDnsRequestWithBody generates requests for RemoveElasticIpReverseDns with any type of body
func NewRemoveElasticIpReverseDnsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/elastic-ip/%s:reverse-dns", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewUpdateElasticIpReverseDnsRequest calls the generic UpdateElasticIpReverseDns builder with application/json body
func NewUpdateElasticIpReverseDnsRequest(server string, id string, body UpdateElasticIpReverseDnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateElasticIpReverseDnsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateElasticIpReverseDnsRequestWithBody generates requests for UpdateElasticIpReverseDns with any type of body
func NewUpdateElasticIpReverseDnsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/elastic-ip/%s:reverse-dns", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListEventsRequest generates requests for ListEvents
func NewListEventsRequest(server string, params *ListEventsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/event")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.From != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "from", *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Max != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "max", *params.Max); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInstancesRequest generates requests for ListInstances
func NewListInstancesRequest(server string, params *ListInstancesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.State != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "state", *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInstanceRequest calls the generic CreateInstance builder with application/json body
func NewCreateInstanceRequest(server string, params *CreateInstanceParams, body CreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInstanceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateInstanceRequestWithBody generates requests for CreateInstance with any type of body
func NewCreateInstanceRequestWithBody(server string, params *CreateInstanceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "start", *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListInstancePoolsRequest generates requests for ListInstancePools
func NewListInstancePoolsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance-pool")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInstancePoolRequest calls the generic CreateInstancePool builder with application/json body
func NewCreateInstancePoolRequest(server string, body CreateInstancePoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInstancePoolRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInstancePoolRequestWithBody generates requests for CreateInstancePool with any type of body
func NewCreateInstancePoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance-pool")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDestroyInstancePoolRequest generates requests for DestroyInstancePool
func NewDestroyInstancePoolRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance-pool/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancePoolRequest generates requests for GetInstancePool
func NewGetInstancePoolRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance-pool/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInstancePoolDescriptionRequest calls the generic UpdateInstancePoolDescription builder with application/json body
func NewUpdateInstancePoolDescriptionRequest(server string, id string, body UpdateInstancePoolDescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInstancePoolDescriptionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInstancePoolDescriptionRequestWithBody generates requests for UpdateInstancePoolDescription with any type of body
func NewUpdateInstancePoolDescriptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance-pool/%s:description", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewUpdateInstancePoolTemplateRequest calls the generic UpdateInstancePoolTemplate builder with application/json body
func NewUpdateInstancePoolTemplateRequest(server string, id string, body UpdateInstancePoolTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInstancePoolTemplateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInstancePoolTemplateRequestWithBody generates requests for UpdateInstancePoolTemplate with any type of body
func NewUpdateInstancePoolTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance-pool/%s:template", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewUpdateInstancePoolTopologyRequest calls the generic UpdateInstancePoolTopology builder with application/json body
func NewUpdateInstancePoolTopologyRequest(server string, id string, body UpdateInstancePoolTopologyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInstancePoolTopologyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInstancePoolTopologyRequestWithBody generates requests for UpdateInstancePoolTopology with any type of body
func NewUpdateInstancePoolTopologyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance-pool/%s:topology", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewUpdateInstancePoolUserDataRequest calls the generic UpdateInstancePoolUserData builder with application/json body
func NewUpdateInstancePoolUserDataRequest(server string, id string, body UpdateInstancePoolUserDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInstancePoolUserDataRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInstancePoolUserDataRequestWithBody generates requests for UpdateInstancePoolUserData with any type of body
func NewUpdateInstancePoolUserDataRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance-pool/%s:user-data", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListInstanceTypesRequest generates requests for ListInstanceTypes
func NewListInstanceTypesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance-type")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDestroyInstanceRequest generates requests for DestroyInstance
func NewDestroyInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstanceRequest generates requests for GetInstance
func NewGetInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocateIpv6OnInstanceRequest generates requests for AllocateIpv6OnInstance
func NewAllocateIpv6OnInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:allocate-ipv6", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachElasticIpOnInstanceRequest calls the generic AttachElasticIpOnInstance builder with application/json body
func NewAttachElasticIpOnInstanceRequest(server string, id string, body AttachElasticIpOnInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAttachElasticIpOnInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAttachElasticIpOnInstanceRequestWithBody generates requests for AttachElasticIpOnInstance with any type of body
func NewAttachElasticIpOnInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:attach-eip", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateSnapshotRequest generates requests for CreateSnapshot
func NewCreateSnapshotRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:create-snapshot", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInstanceDescriptionRequest calls the generic UpdateInstanceDescription builder with application/json body
func NewUpdateInstanceDescriptionRequest(server string, id string, body UpdateInstanceDescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInstanceDescriptionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInstanceDescriptionRequestWithBody generates requests for UpdateInstanceDescription with any type of body
func NewUpdateInstanceDescriptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:description", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDetachElasticIpFromInstanceRequest calls the generic DetachElasticIpFromInstance builder with application/json body
func NewDetachElasticIpFromInstanceRequest(server string, id string, body DetachElasticIpFromInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDetachElasticIpFromInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDetachElasticIpFromInstanceRequestWithBody generates requests for DetachElasticIpFromInstance with any type of body
func NewDetachElasticIpFromInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:detach-eip", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewUpdateInstanceTypeRequest calls the generic UpdateInstanceType builder with application/json body
func NewUpdateInstanceTypeRequest(server string, id string, body UpdateInstanceTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInstanceTypeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInstanceTypeRequestWithBody generates requests for UpdateInstanceType with any type of body
func NewUpdateInstanceTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:instance-type", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRebootInstanceRequest generates requests for RebootInstance
func NewRebootInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:reboot", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetInstancePasswordRequest generates requests for ResetInstancePassword
func NewResetInstancePasswordRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:reset-password", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestoreInstanceFromSnapshotRequest calls the generic RestoreInstanceFromSnapshot builder with application/json body
func NewRestoreInstanceFromSnapshotRequest(server string, id string, body RestoreInstanceFromSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRestoreInstanceFromSnapshotRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRestoreInstanceFromSnapshotRequestWithBody generates requests for RestoreInstanceFromSnapshot with any type of body
func NewRestoreInstanceFromSnapshotRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:restore-snapshot", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRestoreInstanceFromTemplateRequest calls the generic RestoreInstanceFromTemplate builder with application/json body
func NewRestoreInstanceFromTemplateRequest(server string, id string, body RestoreInstanceFromTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRestoreInstanceFromTemplateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRestoreInstanceFromTemplateRequestWithBody generates requests for RestoreInstanceFromTemplate with any type of body
func NewRestoreInstanceFromTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:restore-template", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRemoveInstanceReverseDnsRequest generates requests for RemoveInstanceReverseDns
func NewRemoveInstanceReverseDnsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:reverse-dns", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInstanceReverseDnsRequest calls the generic UpdateInstanceReverseDns builder with application/json body
func NewUpdateInstanceReverseDnsRequest(server string, id string, body UpdateInstanceReverseDnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInstanceReverseDnsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInstanceReverseDnsRequestWithBody generates requests for UpdateInstanceReverseDns with any type of body
func NewUpdateInstanceReverseDnsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:reverse-dns", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewUpdateInstanceSecurityGroupsRequest calls the generic UpdateInstanceSecurityGroups builder with application/json body
func NewUpdateInstanceSecurityGroupsRequest(server string, id string, body UpdateInstanceSecurityGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInstanceSecurityGroupsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInstanceSecurityGroupsRequestWithBody generates requests for UpdateInstanceSecurityGroups with any type of body
func NewUpdateInstanceSecurityGroupsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:security-groups", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewStartInstanceRequest generates requests for StartInstance
func NewStartInstanceRequest(server string, id string, params *StartInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:start", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.RemoveCpus != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "remove-cpus", *params.RemoveCpus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopInstanceRequest generates requests for StopInstance
func NewStopInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:stop", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInstanceUserDataRequest calls the generic UpdateInstanceUserData builder with application/json body
func NewUpdateInstanceUserDataRequest(server string, id string, body UpdateInstanceUserDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInstanceUserDataRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInstanceUserDataRequestWithBody generates requests for UpdateInstanceUserData with any type of body
func NewUpdateInstanceUserDataRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/instance/%s:user-data", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListLoadBalancersRequest generates requests for ListLoadBalancers
func NewListLoadBalancersRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/load-balancer")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLoadBalancerRequest calls the generic CreateLoadBalancer builder with application/json body
func NewCreateLoadBalancerRequest(server string, body CreateLoadBalancerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLoadBalancerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateLoadBalancerRequestWithBody generates requests for CreateLoadBalancer with any type of body
func NewCreateLoadBalancerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/load-balancer")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDestroyLoadBalancerRequest generates requests for DestroyLoadBalancer
func NewDestroyLoadBalancerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/load-balancer/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoadBalancerRequest generates requests for GetLoadBalancer
func NewGetLoadBalancerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/load-balancer/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLoadBalancerRequest calls the generic UpdateLoadBalancer builder with application/json body
func NewUpdateLoadBalancerRequest(server string, id string, body UpdateLoadBalancerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLoadBalancerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateLoadBalancerRequestWithBody generates requests for UpdateLoadBalancer with any type of body
func NewUpdateLoadBalancerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/load-balancer/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewAddServiceToLoadBalancerRequest calls the generic AddServiceToLoadBalancer builder with application/json body
func NewAddServiceToLoadBalancerRequest(server string, id string, body AddServiceToLoadBalancerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddServiceToLoadBalancerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddServiceToLoadBalancerRequestWithBody generates requests for AddServiceToLoadBalancer with any type of body
func NewAddServiceToLoadBalancerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/load-balancer/%s/service", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteLoadBalancerServiceRequest generates requests for DeleteLoadBalancerService
func NewDeleteLoadBalancerServiceRequest(server string, id string, serviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "service-id", serviceId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/load-balancer/%s/service/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoadBalancerServiceRequest generates requests for GetLoadBalancerService
func NewGetLoadBalancerServiceRequest(server string, id string, serviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "service-id", serviceId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/load-balancer/%s/service/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLoadBalancerServiceRequest calls the generic UpdateLoadBalancerService builder with application/json body
func NewUpdateLoadBalancerServiceRequest(server string, id string, serviceId string, body UpdateLoadBalancerServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLoadBalancerServiceRequestWithBody(server, id, serviceId, "application/json", bodyReader)
}

// NewUpdateLoadBalancerServiceRequestWithBody generates requests for UpdateLoadBalancerService with any type of body
func NewUpdateLoadBalancerServiceRequestWithBody(server string, id string, serviceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "service-id", serviceId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/load-balancer/%s/service/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPingRequest generates requests for Ping
func NewPingRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ping")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListResultsRequest generates requests for ListResults
func NewListResultsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/result")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResultRequest generates requests for GetResult
func NewGetResultRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/result/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSecurityGroupsRequest generates requests for ListSecurityGroups
func NewListSecurityGroupsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security-group")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSecurityGroupRequest calls the generic CreateSecurityGroup builder with application/json body
func NewCreateSecurityGroupRequest(server string, body CreateSecurityGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSecurityGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSecurityGroupRequestWithBody generates requests for CreateSecurityGroup with any type of body
func NewCreateSecurityGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security-group")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDestroySecurityGroupRequest generates requests for DestroySecurityGroup
func NewDestroySecurityGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security-group/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecurityGroupRequest generates requests for GetSecurityGroup
func NewGetSecurityGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security-group/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRuleToSecurityGroupRequest calls the generic AddRuleToSecurityGroup builder with application/json body
func NewAddRuleToSecurityGroupRequest(server string, id string, body AddRuleToSecurityGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRuleToSecurityGroupRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddRuleToSecurityGroupRequestWithBody generates requests for AddRuleToSecurityGroup with any type of body
func NewAddRuleToSecurityGroupRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security-group/%s/rules", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteRuleFromSecurityGroupRequest generates requests for DeleteRuleFromSecurityGroup
func NewDeleteRuleFromSecurityGroupRequest(server string, id string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "rule-id", ruleId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security-group/%s/rules/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSecurityGroupDescriptionRequest calls the generic UpdateSecurityGroupDescription builder with application/json body
func NewUpdateSecurityGroupDescriptionRequest(server string, id string, body UpdateSecurityGroupDescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSecurityGroupDescriptionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSecurityGroupDescriptionRequestWithBody generates requests for UpdateSecurityGroupDescription with any type of body
func NewUpdateSecurityGroupDescriptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security-group/%s:description", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListSecurityGroupInstancesRequest generates requests for ListSecurityGroupInstances
func NewListSecurityGroupInstancesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security-group/%s:instances", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSecurityGroupRulesRequest calls the generic UpdateSecurityGroupRules builder with application/json body
func NewUpdateSecurityGroupRulesRequest(server string, id string, body UpdateSecurityGroupRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSecurityGroupRulesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSecurityGroupRulesRequestWithBody generates requests for UpdateSecurityGroupRules with any type of body
func NewUpdateSecurityGroupRulesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/security-group/%s:rules", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListSnapshotsRequest generates requests for ListSnapshots
func NewListSnapshotsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/snapshot")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDestroySnapshotRequest generates requests for DestroySnapshot
func NewDestroySnapshotRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/snapshot/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnapshotRequest generates requests for GetSnapshot
func NewGetSnapshotRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/snapshot/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSnapshotDescriptionRequest calls the generic UpdateSnapshotDescription builder with application/json body
func NewUpdateSnapshotDescriptionRequest(server string, id string, body UpdateSnapshotDescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSnapshotDescriptionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSnapshotDescriptionRequestWithBody generates requests for UpdateSnapshotDescription with any type of body
func NewUpdateSnapshotDescriptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/snapshot/%s/description", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListSshKeysRequest generates requests for ListSshKeys
func NewListSshKeysRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ssh-key")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSshKeyRequest generates requests for DeleteSshKey
func NewDeleteSshKeyRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "name", name)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ssh-key/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTemplatesRequest generates requests for ListTemplates
func NewListTemplatesRequest(server string, params *ListTemplatesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/template")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Visibility != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "visibility", *params.Visibility); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Family != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "family", *params.Family); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShowReleases != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "show-releases", *params.ShowReleases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterTemplateRequest calls the generic RegisterTemplate builder with application/json body
func NewRegisterTemplateRequest(server string, body RegisterTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterTemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterTemplateRequestWithBody generates requests for RegisterTemplate with any type of body
func NewRegisterTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/template")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDestroyTemplateRequest generates requests for DestroyTemplate
func NewDestroyTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/template/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersionRequest generates requests for Version
func NewVersionRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/version")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListZonesRequest generates requests for ListZones
func NewListZonesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/zone")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Index request
	IndexWithResponse(ctx context.Context) (*IndexResponse, error)

	// ListAntiAffinityGroups request
	ListAntiAffinityGroupsWithResponse(ctx context.Context) (*ListAntiAffinityGroupsResponse, error)

	// CreateAntiAffinityGroup request  with any body
	CreateAntiAffinityGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateAntiAffinityGroupResponse, error)

	CreateAntiAffinityGroupWithResponse(ctx context.Context, body CreateAntiAffinityGroupJSONRequestBody) (*CreateAntiAffinityGroupResponse, error)

	// DestroyAntiAffinityGroup request
	DestroyAntiAffinityGroupWithResponse(ctx context.Context, id string) (*DestroyAntiAffinityGroupResponse, error)

	// UpdateAntiAffinityGroupDescription request  with any body
	UpdateAntiAffinityGroupDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateAntiAffinityGroupDescriptionResponse, error)

	UpdateAntiAffinityGroupDescriptionWithResponse(ctx context.Context, id string, body UpdateAntiAffinityGroupDescriptionJSONRequestBody) (*UpdateAntiAffinityGroupDescriptionResponse, error)

	// ListAntiAffinityGroupInstances request
	ListAntiAffinityGroupInstancesWithResponse(ctx context.Context, id string) (*ListAntiAffinityGroupInstancesResponse, error)

	// ListApiKeys request
	ListApiKeysWithResponse(ctx context.Context) (*ListApiKeysResponse, error)

	// GenerateApiKey request  with any body
	GenerateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GenerateApiKeyResponse, error)

	GenerateApiKeyWithResponse(ctx context.Context, body GenerateApiKeyJSONRequestBody) (*GenerateApiKeyResponse, error)

	// RevokeApiKey request
	RevokeApiKeyWithResponse(ctx context.Context, key string) (*RevokeApiKeyResponse, error)

	// GetApiKey request
	GetApiKeyWithResponse(ctx context.Context, key string) (*GetApiKeyResponse, error)

	// GenerateSshKey request
	GenerateSshKeyWithResponse(ctx context.Context) (*GenerateSshKeyResponse, error)

	// ImportSshKey request  with any body
	ImportSshKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ImportSshKeyResponse, error)

	ImportSshKeyWithResponse(ctx context.Context, body ImportSshKeyJSONRequestBody) (*ImportSshKeyResponse, error)

	// ListElasticIps request
	ListElasticIpsWithResponse(ctx context.Context) (*ListElasticIpsResponse, error)

	// AllocateElasticIp request  with any body
	AllocateElasticIpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AllocateElasticIpResponse, error)

	AllocateElasticIpWithResponse(ctx context.Context, body AllocateElasticIpJSONRequestBody) (*AllocateElasticIpResponse, error)

	// ReleaseElasticIp request
	ReleaseElasticIpWithResponse(ctx context.Context, id string) (*ReleaseElasticIpResponse, error)

	// GetElasticIp request
	GetElasticIpWithResponse(ctx context.Context, id string) (*GetElasticIpResponse, error)

	// UpdateElasticIpHealthcheck request  with any body
	UpdateElasticIpHealthcheckWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateElasticIpHealthcheckResponse, error)

	UpdateElasticIpHealthcheckWithResponse(ctx context.Context, id string, body UpdateElasticIpHealthcheckJSONRequestBody) (*UpdateElasticIpHealthcheckResponse, error)

	// RemoveElasticIpReverseDns request  with any body
	RemoveElasticIpReverseDnsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*RemoveElasticIpReverseDnsResponse, error)

	RemoveElasticIpReverseDnsWithResponse(ctx context.Context, id string, body RemoveElasticIpReverseDnsJSONRequestBody) (*RemoveElasticIpReverseDnsResponse, error)

	// UpdateElasticIpReverseDns request  with any body
	UpdateElasticIpReverseDnsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateElasticIpReverseDnsResponse, error)

	UpdateElasticIpReverseDnsWithResponse(ctx context.Context, id string, body UpdateElasticIpReverseDnsJSONRequestBody) (*UpdateElasticIpReverseDnsResponse, error)

	// ListEvents request
	ListEventsWithResponse(ctx context.Context, params *ListEventsParams) (*ListEventsResponse, error)

	// ListInstances request
	ListInstancesWithResponse(ctx context.Context, params *ListInstancesParams) (*ListInstancesResponse, error)

	// CreateInstance request  with any body
	CreateInstanceWithBodyWithResponse(ctx context.Context, params *CreateInstanceParams, contentType string, body io.Reader) (*CreateInstanceResponse, error)

	CreateInstanceWithResponse(ctx context.Context, params *CreateInstanceParams, body CreateInstanceJSONRequestBody) (*CreateInstanceResponse, error)

	// ListInstancePools request
	ListInstancePoolsWithResponse(ctx context.Context) (*ListInstancePoolsResponse, error)

	// CreateInstancePool request  with any body
	CreateInstancePoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateInstancePoolResponse, error)

	CreateInstancePoolWithResponse(ctx context.Context, body CreateInstancePoolJSONRequestBody) (*CreateInstancePoolResponse, error)

	// DestroyInstancePool request
	DestroyInstancePoolWithResponse(ctx context.Context, id string) (*DestroyInstancePoolResponse, error)

	// GetInstancePool request
	GetInstancePoolWithResponse(ctx context.Context, id string) (*GetInstancePoolResponse, error)

	// UpdateInstancePoolDescription request  with any body
	UpdateInstancePoolDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstancePoolDescriptionResponse, error)

	UpdateInstancePoolDescriptionWithResponse(ctx context.Context, id string, body UpdateInstancePoolDescriptionJSONRequestBody) (*UpdateInstancePoolDescriptionResponse, error)

	// UpdateInstancePoolTemplate request  with any body
	UpdateInstancePoolTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstancePoolTemplateResponse, error)

	UpdateInstancePoolTemplateWithResponse(ctx context.Context, id string, body UpdateInstancePoolTemplateJSONRequestBody) (*UpdateInstancePoolTemplateResponse, error)

	// UpdateInstancePoolTopology request  with any body
	UpdateInstancePoolTopologyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstancePoolTopologyResponse, error)

	UpdateInstancePoolTopologyWithResponse(ctx context.Context, id string, body UpdateInstancePoolTopologyJSONRequestBody) (*UpdateInstancePoolTopologyResponse, error)

	// UpdateInstancePoolUserData request  with any body
	UpdateInstancePoolUserDataWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstancePoolUserDataResponse, error)

	UpdateInstancePoolUserDataWithResponse(ctx context.Context, id string, body UpdateInstancePoolUserDataJSONRequestBody) (*UpdateInstancePoolUserDataResponse, error)

	// ListInstanceTypes request
	ListInstanceTypesWithResponse(ctx context.Context) (*ListInstanceTypesResponse, error)

	// DestroyInstance request
	DestroyInstanceWithResponse(ctx context.Context, id string) (*DestroyInstanceResponse, error)

	// GetInstance request
	GetInstanceWithResponse(ctx context.Context, id string) (*GetInstanceResponse, error)

	// AllocateIpv6OnInstance request
	AllocateIpv6OnInstanceWithResponse(ctx context.Context, id string) (*AllocateIpv6OnInstanceResponse, error)

	// AttachElasticIpOnInstance request  with any body
	AttachElasticIpOnInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*AttachElasticIpOnInstanceResponse, error)

	AttachElasticIpOnInstanceWithResponse(ctx context.Context, id string, body AttachElasticIpOnInstanceJSONRequestBody) (*AttachElasticIpOnInstanceResponse, error)

	// CreateSnapshot request
	CreateSnapshotWithResponse(ctx context.Context, id string) (*CreateSnapshotResponse, error)

	// UpdateInstanceDescription request  with any body
	UpdateInstanceDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstanceDescriptionResponse, error)

	UpdateInstanceDescriptionWithResponse(ctx context.Context, id string, body UpdateInstanceDescriptionJSONRequestBody) (*UpdateInstanceDescriptionResponse, error)

	// DetachElasticIpFromInstance request  with any body
	DetachElasticIpFromInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*DetachElasticIpFromInstanceResponse, error)

	DetachElasticIpFromInstanceWithResponse(ctx context.Context, id string, body DetachElasticIpFromInstanceJSONRequestBody) (*DetachElasticIpFromInstanceResponse, error)

	// UpdateInstanceType request  with any body
	UpdateInstanceTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstanceTypeResponse, error)

	UpdateInstanceTypeWithResponse(ctx context.Context, id string, body UpdateInstanceTypeJSONRequestBody) (*UpdateInstanceTypeResponse, error)

	// RebootInstance request
	RebootInstanceWithResponse(ctx context.Context, id string) (*RebootInstanceResponse, error)

	// ResetInstancePassword request
	ResetInstancePasswordWithResponse(ctx context.Context, id string) (*ResetInstancePasswordResponse, error)

	// RestoreInstanceFromSnapshot request  with any body
	RestoreInstanceFromSnapshotWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*RestoreInstanceFromSnapshotResponse, error)

	RestoreInstanceFromSnapshotWithResponse(ctx context.Context, id string, body RestoreInstanceFromSnapshotJSONRequestBody) (*RestoreInstanceFromSnapshotResponse, error)

	// RestoreInstanceFromTemplate request  with any body
	RestoreInstanceFromTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*RestoreInstanceFromTemplateResponse, error)

	RestoreInstanceFromTemplateWithResponse(ctx context.Context, id string, body RestoreInstanceFromTemplateJSONRequestBody) (*RestoreInstanceFromTemplateResponse, error)

	// RemoveInstanceReverseDns request
	RemoveInstanceReverseDnsWithResponse(ctx context.Context, id string) (*RemoveInstanceReverseDnsResponse, error)

	// UpdateInstanceReverseDns request  with any body
	UpdateInstanceReverseDnsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstanceReverseDnsResponse, error)

	UpdateInstanceReverseDnsWithResponse(ctx context.Context, id string, body UpdateInstanceReverseDnsJSONRequestBody) (*UpdateInstanceReverseDnsResponse, error)

	// UpdateInstanceSecurityGroups request  with any body
	UpdateInstanceSecurityGroupsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstanceSecurityGroupsResponse, error)

	UpdateInstanceSecurityGroupsWithResponse(ctx context.Context, id string, body UpdateInstanceSecurityGroupsJSONRequestBody) (*UpdateInstanceSecurityGroupsResponse, error)

	// StartInstance request
	StartInstanceWithResponse(ctx context.Context, id string, params *StartInstanceParams) (*StartInstanceResponse, error)

	// StopInstance request
	StopInstanceWithResponse(ctx context.Context, id string) (*StopInstanceResponse, error)

	// UpdateInstanceUserData request  with any body
	UpdateInstanceUserDataWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstanceUserDataResponse, error)

	UpdateInstanceUserDataWithResponse(ctx context.Context, id string, body UpdateInstanceUserDataJSONRequestBody) (*UpdateInstanceUserDataResponse, error)

	// ListLoadBalancers request
	ListLoadBalancersWithResponse(ctx context.Context) (*ListLoadBalancersResponse, error)

	// CreateLoadBalancer request  with any body
	CreateLoadBalancerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateLoadBalancerResponse, error)

	CreateLoadBalancerWithResponse(ctx context.Context, body CreateLoadBalancerJSONRequestBody) (*CreateLoadBalancerResponse, error)

	// DestroyLoadBalancer request
	DestroyLoadBalancerWithResponse(ctx context.Context, id string) (*DestroyLoadBalancerResponse, error)

	// GetLoadBalancer request
	GetLoadBalancerWithResponse(ctx context.Context, id string) (*GetLoadBalancerResponse, error)

	// UpdateLoadBalancer request  with any body
	UpdateLoadBalancerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateLoadBalancerResponse, error)

	UpdateLoadBalancerWithResponse(ctx context.Context, id string, body UpdateLoadBalancerJSONRequestBody) (*UpdateLoadBalancerResponse, error)

	// AddServiceToLoadBalancer request  with any body
	AddServiceToLoadBalancerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*AddServiceToLoadBalancerResponse, error)

	AddServiceToLoadBalancerWithResponse(ctx context.Context, id string, body AddServiceToLoadBalancerJSONRequestBody) (*AddServiceToLoadBalancerResponse, error)

	// DeleteLoadBalancerService request
	DeleteLoadBalancerServiceWithResponse(ctx context.Context, id string, serviceId string) (*DeleteLoadBalancerServiceResponse, error)

	// GetLoadBalancerService request
	GetLoadBalancerServiceWithResponse(ctx context.Context, id string, serviceId string) (*GetLoadBalancerServiceResponse, error)

	// UpdateLoadBalancerService request  with any body
	UpdateLoadBalancerServiceWithBodyWithResponse(ctx context.Context, id string, serviceId string, contentType string, body io.Reader) (*UpdateLoadBalancerServiceResponse, error)

	UpdateLoadBalancerServiceWithResponse(ctx context.Context, id string, serviceId string, body UpdateLoadBalancerServiceJSONRequestBody) (*UpdateLoadBalancerServiceResponse, error)

	// Ping request
	PingWithResponse(ctx context.Context) (*PingResponse, error)

	// ListResults request
	ListResultsWithResponse(ctx context.Context) (*ListResultsResponse, error)

	// GetResult request
	GetResultWithResponse(ctx context.Context, id string) (*GetResultResponse, error)

	// ListSecurityGroups request
	ListSecurityGroupsWithResponse(ctx context.Context) (*ListSecurityGroupsResponse, error)

	// CreateSecurityGroup request  with any body
	CreateSecurityGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSecurityGroupResponse, error)

	CreateSecurityGroupWithResponse(ctx context.Context, body CreateSecurityGroupJSONRequestBody) (*CreateSecurityGroupResponse, error)

	// DestroySecurityGroup request
	DestroySecurityGroupWithResponse(ctx context.Context, id string) (*DestroySecurityGroupResponse, error)

	// GetSecurityGroup request
	GetSecurityGroupWithResponse(ctx context.Context, id string) (*GetSecurityGroupResponse, error)

	// AddRuleToSecurityGroup request  with any body
	AddRuleToSecurityGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*AddRuleToSecurityGroupResponse, error)

	AddRuleToSecurityGroupWithResponse(ctx context.Context, id string, body AddRuleToSecurityGroupJSONRequestBody) (*AddRuleToSecurityGroupResponse, error)

	// DeleteRuleFromSecurityGroup request
	DeleteRuleFromSecurityGroupWithResponse(ctx context.Context, id string, ruleId string) (*DeleteRuleFromSecurityGroupResponse, error)

	// UpdateSecurityGroupDescription request  with any body
	UpdateSecurityGroupDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateSecurityGroupDescriptionResponse, error)

	UpdateSecurityGroupDescriptionWithResponse(ctx context.Context, id string, body UpdateSecurityGroupDescriptionJSONRequestBody) (*UpdateSecurityGroupDescriptionResponse, error)

	// ListSecurityGroupInstances request
	ListSecurityGroupInstancesWithResponse(ctx context.Context, id string) (*ListSecurityGroupInstancesResponse, error)

	// UpdateSecurityGroupRules request  with any body
	UpdateSecurityGroupRulesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateSecurityGroupRulesResponse, error)

	UpdateSecurityGroupRulesWithResponse(ctx context.Context, id string, body UpdateSecurityGroupRulesJSONRequestBody) (*UpdateSecurityGroupRulesResponse, error)

	// ListSnapshots request
	ListSnapshotsWithResponse(ctx context.Context) (*ListSnapshotsResponse, error)

	// DestroySnapshot request
	DestroySnapshotWithResponse(ctx context.Context, id string) (*DestroySnapshotResponse, error)

	// GetSnapshot request
	GetSnapshotWithResponse(ctx context.Context, id string) (*GetSnapshotResponse, error)

	// UpdateSnapshotDescription request  with any body
	UpdateSnapshotDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateSnapshotDescriptionResponse, error)

	UpdateSnapshotDescriptionWithResponse(ctx context.Context, id string, body UpdateSnapshotDescriptionJSONRequestBody) (*UpdateSnapshotDescriptionResponse, error)

	// ListSshKeys request
	ListSshKeysWithResponse(ctx context.Context) (*ListSshKeysResponse, error)

	// DeleteSshKey request
	DeleteSshKeyWithResponse(ctx context.Context, name string) (*DeleteSshKeyResponse, error)

	// ListTemplates request
	ListTemplatesWithResponse(ctx context.Context, params *ListTemplatesParams) (*ListTemplatesResponse, error)

	// RegisterTemplate request  with any body
	RegisterTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RegisterTemplateResponse, error)

	RegisterTemplateWithResponse(ctx context.Context, body RegisterTemplateJSONRequestBody) (*RegisterTemplateResponse, error)

	// DestroyTemplate request
	DestroyTemplateWithResponse(ctx context.Context, id string) (*DestroyTemplateResponse, error)

	// Version request
	VersionWithResponse(ctx context.Context) (*VersionResponse, error)

	// ListZones request
	ListZonesWithResponse(ctx context.Context) (*ListZonesResponse, error)
}

type IndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r IndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAntiAffinityGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AntiAffinityGroups *[]AntiAffinityGroup `json:"anti-affinity-groups,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAntiAffinityGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAntiAffinityGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAntiAffinityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AntiAffinityGroup
}

// Status returns HTTPResponse.Status
func (r CreateAntiAffinityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAntiAffinityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyAntiAffinityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r DestroyAntiAffinityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyAntiAffinityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAntiAffinityGroupDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AntiAffinityGroup
}

// Status returns HTTPResponse.Status
func (r UpdateAntiAffinityGroupDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAntiAffinityGroupDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAntiAffinityGroupInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Instances *[]Instance `json:"instances,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAntiAffinityGroupInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAntiAffinityGroupInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApiKeys *[]ApiKey `json:"api-keys,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKey
}

// Status returns HTTPResponse.Status
func (r GenerateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r RevokeApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKey
}

// Status returns HTTPResponse.Status
func (r GetApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateSshKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SshKey
}

// Status returns HTTPResponse.Status
func (r GenerateSshKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateSshKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportSshKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SshKey
}

// Status returns HTTPResponse.Status
func (r ImportSshKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportSshKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListElasticIpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ElasticIps *[]ElasticIp `json:"elastic-ips,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListElasticIpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListElasticIpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocateElasticIpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r AllocateElasticIpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocateElasticIpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReleaseElasticIpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r ReleaseElasticIpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReleaseElasticIpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElasticIpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ElasticIp
}

// Status returns HTTPResponse.Status
func (r GetElasticIpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElasticIpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateElasticIpHealthcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ElasticIp
}

// Status returns HTTPResponse.Status
func (r UpdateElasticIpHealthcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateElasticIpHealthcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveElasticIpReverseDnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ElasticIp
}

// Status returns HTTPResponse.Status
func (r RemoveElasticIpReverseDnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveElasticIpReverseDnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateElasticIpReverseDnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ElasticIp
}

// Status returns HTTPResponse.Status
func (r UpdateElasticIpReverseDnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateElasticIpReverseDnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Events *[]Event `json:"events,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Instances *[]Instance `json:"instances,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r CreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInstancePoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		InstancePools *[]InstancePool `json:"instance-pools,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInstancePoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInstancePoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInstancePoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstancePool
}

// Status returns HTTPResponse.Status
func (r CreateInstancePoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInstancePoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyInstancePoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r DestroyInstancePoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyInstancePoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancePoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstancePool
}

// Status returns HTTPResponse.Status
func (r GetInstancePoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancePoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInstancePoolDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstancePool
}

// Status returns HTTPResponse.Status
func (r UpdateInstancePoolDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInstancePoolDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInstancePoolTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstancePool
}

// Status returns HTTPResponse.Status
func (r UpdateInstancePoolTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInstancePoolTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInstancePoolTopologyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstancePool
}

// Status returns HTTPResponse.Status
func (r UpdateInstancePoolTopologyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInstancePoolTopologyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInstancePoolUserDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstancePool
}

// Status returns HTTPResponse.Status
func (r UpdateInstancePoolUserDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInstancePoolUserDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInstanceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		InstanceTypes *[]InstanceType `json:"instance-types,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInstanceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInstanceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r DestroyInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r GetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocateIpv6OnInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
	JSONDefault  *Result
}

// Status returns HTTPResponse.Status
func (r AllocateIpv6OnInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocateIpv6OnInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachElasticIpOnInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r AttachElasticIpOnInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachElasticIpOnInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r CreateSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInstanceDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
}

// Status returns HTTPResponse.Status
func (r UpdateInstanceDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInstanceDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DetachElasticIpFromInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r DetachElasticIpFromInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DetachElasticIpFromInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInstanceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
}

// Status returns HTTPResponse.Status
func (r UpdateInstanceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInstanceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RebootInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r RebootInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RebootInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetInstancePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r ResetInstancePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetInstancePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreInstanceFromSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r RestoreInstanceFromSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreInstanceFromSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreInstanceFromTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r RestoreInstanceFromTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreInstanceFromTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveInstanceReverseDnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r RemoveInstanceReverseDnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveInstanceReverseDnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInstanceReverseDnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r UpdateInstanceReverseDnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInstanceReverseDnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInstanceSecurityGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
}

// Status returns HTTPResponse.Status
func (r UpdateInstanceSecurityGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInstanceSecurityGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
	JSON400      *Result
}

// Status returns HTTPResponse.Status
func (r StartInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
	JSON400      *Result
}

// Status returns HTTPResponse.Status
func (r StopInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInstanceUserDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
}

// Status returns HTTPResponse.Status
func (r UpdateInstanceUserDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInstanceUserDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLoadBalancersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		LoadBalancers *[]LoadBalancer `json:"load-balancers,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListLoadBalancersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLoadBalancersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLoadBalancerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r CreateLoadBalancerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLoadBalancerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyLoadBalancerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r DestroyLoadBalancerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyLoadBalancerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoadBalancerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoadBalancer
}

// Status returns HTTPResponse.Status
func (r GetLoadBalancerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoadBalancerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLoadBalancerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r UpdateLoadBalancerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLoadBalancerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddServiceToLoadBalancerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r AddServiceToLoadBalancerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddServiceToLoadBalancerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLoadBalancerServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r DeleteLoadBalancerServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLoadBalancerServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoadBalancerServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoadBalancerService
}

// Status returns HTTPResponse.Status
func (r GetLoadBalancerServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoadBalancerServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLoadBalancerServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r UpdateLoadBalancerServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLoadBalancerServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results *[]Result `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r GetResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSecurityGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		SecurityGroups *[]SecurityGroup `json:"security-groups,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSecurityGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSecurityGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSecurityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroup
}

// Status returns HTTPResponse.Status
func (r CreateSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroySecurityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r DestroySecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroySecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecurityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroup
}

// Status returns HTTPResponse.Status
func (r GetSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRuleToSecurityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroupRule
}

// Status returns HTTPResponse.Status
func (r AddRuleToSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRuleToSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRuleFromSecurityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroup
}

// Status returns HTTPResponse.Status
func (r DeleteRuleFromSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRuleFromSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSecurityGroupDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroup
}

// Status returns HTTPResponse.Status
func (r UpdateSecurityGroupDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSecurityGroupDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSecurityGroupInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Instances *[]Instance `json:"instances,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSecurityGroupInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSecurityGroupInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSecurityGroupRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroup
}

// Status returns HTTPResponse.Status
func (r UpdateSecurityGroupRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSecurityGroupRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Snapshots *[]Snapshot `json:"snapshots,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroySnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r DestroySnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroySnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Snapshot
	JSON404      *Result
}

// Status returns HTTPResponse.Status
func (r GetSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSnapshotDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Snapshot
}

// Status returns HTTPResponse.Status
func (r UpdateSnapshotDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSnapshotDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSshKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		SshKeys *[]ApiKey `json:"ssh-keys,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSshKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSshKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSshKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Result
}

// Status returns HTTPResponse.Status
func (r DeleteSshKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSshKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Templates *[]Template `json:"templates,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r RegisterTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Result
}

// Status returns HTTPResponse.Status
func (r DestroyTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r VersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Zones *[]Zone `json:"zones,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// IndexWithResponse request returning *IndexResponse
func (c *ClientWithResponses) IndexWithResponse(ctx context.Context) (*IndexResponse, error) {
	rsp, err := c.Index(ctx)
	if err != nil {
		return nil, err
	}
	return ParseIndexResponse(rsp)
}

// ListAntiAffinityGroupsWithResponse request returning *ListAntiAffinityGroupsResponse
func (c *ClientWithResponses) ListAntiAffinityGroupsWithResponse(ctx context.Context) (*ListAntiAffinityGroupsResponse, error) {
	rsp, err := c.ListAntiAffinityGroups(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListAntiAffinityGroupsResponse(rsp)
}

// CreateAntiAffinityGroupWithBodyWithResponse request with arbitrary body returning *CreateAntiAffinityGroupResponse
func (c *ClientWithResponses) CreateAntiAffinityGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateAntiAffinityGroupResponse, error) {
	rsp, err := c.CreateAntiAffinityGroupWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAntiAffinityGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateAntiAffinityGroupWithResponse(ctx context.Context, body CreateAntiAffinityGroupJSONRequestBody) (*CreateAntiAffinityGroupResponse, error) {
	rsp, err := c.CreateAntiAffinityGroup(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAntiAffinityGroupResponse(rsp)
}

// DestroyAntiAffinityGroupWithResponse request returning *DestroyAntiAffinityGroupResponse
func (c *ClientWithResponses) DestroyAntiAffinityGroupWithResponse(ctx context.Context, id string) (*DestroyAntiAffinityGroupResponse, error) {
	rsp, err := c.DestroyAntiAffinityGroup(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDestroyAntiAffinityGroupResponse(rsp)
}

// UpdateAntiAffinityGroupDescriptionWithBodyWithResponse request with arbitrary body returning *UpdateAntiAffinityGroupDescriptionResponse
func (c *ClientWithResponses) UpdateAntiAffinityGroupDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateAntiAffinityGroupDescriptionResponse, error) {
	rsp, err := c.UpdateAntiAffinityGroupDescriptionWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAntiAffinityGroupDescriptionResponse(rsp)
}

func (c *ClientWithResponses) UpdateAntiAffinityGroupDescriptionWithResponse(ctx context.Context, id string, body UpdateAntiAffinityGroupDescriptionJSONRequestBody) (*UpdateAntiAffinityGroupDescriptionResponse, error) {
	rsp, err := c.UpdateAntiAffinityGroupDescription(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAntiAffinityGroupDescriptionResponse(rsp)
}

// ListAntiAffinityGroupInstancesWithResponse request returning *ListAntiAffinityGroupInstancesResponse
func (c *ClientWithResponses) ListAntiAffinityGroupInstancesWithResponse(ctx context.Context, id string) (*ListAntiAffinityGroupInstancesResponse, error) {
	rsp, err := c.ListAntiAffinityGroupInstances(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseListAntiAffinityGroupInstancesResponse(rsp)
}

// ListApiKeysWithResponse request returning *ListApiKeysResponse
func (c *ClientWithResponses) ListApiKeysWithResponse(ctx context.Context) (*ListApiKeysResponse, error) {
	rsp, err := c.ListApiKeys(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListApiKeysResponse(rsp)
}

// GenerateApiKeyWithBodyWithResponse request with arbitrary body returning *GenerateApiKeyResponse
func (c *ClientWithResponses) GenerateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GenerateApiKeyResponse, error) {
	rsp, err := c.GenerateApiKeyWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGenerateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) GenerateApiKeyWithResponse(ctx context.Context, body GenerateApiKeyJSONRequestBody) (*GenerateApiKeyResponse, error) {
	rsp, err := c.GenerateApiKey(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseGenerateApiKeyResponse(rsp)
}

// RevokeApiKeyWithResponse request returning *RevokeApiKeyResponse
func (c *ClientWithResponses) RevokeApiKeyWithResponse(ctx context.Context, key string) (*RevokeApiKeyResponse, error) {
	rsp, err := c.RevokeApiKey(ctx, key)
	if err != nil {
		return nil, err
	}
	return ParseRevokeApiKeyResponse(rsp)
}

// GetApiKeyWithResponse request returning *GetApiKeyResponse
func (c *ClientWithResponses) GetApiKeyWithResponse(ctx context.Context, key string) (*GetApiKeyResponse, error) {
	rsp, err := c.GetApiKey(ctx, key)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeyResponse(rsp)
}

// GenerateSshKeyWithResponse request returning *GenerateSshKeyResponse
func (c *ClientWithResponses) GenerateSshKeyWithResponse(ctx context.Context) (*GenerateSshKeyResponse, error) {
	rsp, err := c.GenerateSshKey(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGenerateSshKeyResponse(rsp)
}

// ImportSshKeyWithBodyWithResponse request with arbitrary body returning *ImportSshKeyResponse
func (c *ClientWithResponses) ImportSshKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ImportSshKeyResponse, error) {
	rsp, err := c.ImportSshKeyWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseImportSshKeyResponse(rsp)
}

func (c *ClientWithResponses) ImportSshKeyWithResponse(ctx context.Context, body ImportSshKeyJSONRequestBody) (*ImportSshKeyResponse, error) {
	rsp, err := c.ImportSshKey(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseImportSshKeyResponse(rsp)
}

// ListElasticIpsWithResponse request returning *ListElasticIpsResponse
func (c *ClientWithResponses) ListElasticIpsWithResponse(ctx context.Context) (*ListElasticIpsResponse, error) {
	rsp, err := c.ListElasticIps(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListElasticIpsResponse(rsp)
}

// AllocateElasticIpWithBodyWithResponse request with arbitrary body returning *AllocateElasticIpResponse
func (c *ClientWithResponses) AllocateElasticIpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AllocateElasticIpResponse, error) {
	rsp, err := c.AllocateElasticIpWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAllocateElasticIpResponse(rsp)
}

func (c *ClientWithResponses) AllocateElasticIpWithResponse(ctx context.Context, body AllocateElasticIpJSONRequestBody) (*AllocateElasticIpResponse, error) {
	rsp, err := c.AllocateElasticIp(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseAllocateElasticIpResponse(rsp)
}

// ReleaseElasticIpWithResponse request returning *ReleaseElasticIpResponse
func (c *ClientWithResponses) ReleaseElasticIpWithResponse(ctx context.Context, id string) (*ReleaseElasticIpResponse, error) {
	rsp, err := c.ReleaseElasticIp(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseReleaseElasticIpResponse(rsp)
}

// GetElasticIpWithResponse request returning *GetElasticIpResponse
func (c *ClientWithResponses) GetElasticIpWithResponse(ctx context.Context, id string) (*GetElasticIpResponse, error) {
	rsp, err := c.GetElasticIp(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetElasticIpResponse(rsp)
}

// UpdateElasticIpHealthcheckWithBodyWithResponse request with arbitrary body returning *UpdateElasticIpHealthcheckResponse
func (c *ClientWithResponses) UpdateElasticIpHealthcheckWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateElasticIpHealthcheckResponse, error) {
	rsp, err := c.UpdateElasticIpHealthcheckWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElasticIpHealthcheckResponse(rsp)
}

func (c *ClientWithResponses) UpdateElasticIpHealthcheckWithResponse(ctx context.Context, id string, body UpdateElasticIpHealthcheckJSONRequestBody) (*UpdateElasticIpHealthcheckResponse, error) {
	rsp, err := c.UpdateElasticIpHealthcheck(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElasticIpHealthcheckResponse(rsp)
}

// RemoveElasticIpReverseDnsWithBodyWithResponse request with arbitrary body returning *RemoveElasticIpReverseDnsResponse
func (c *ClientWithResponses) RemoveElasticIpReverseDnsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*RemoveElasticIpReverseDnsResponse, error) {
	rsp, err := c.RemoveElasticIpReverseDnsWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRemoveElasticIpReverseDnsResponse(rsp)
}

func (c *ClientWithResponses) RemoveElasticIpReverseDnsWithResponse(ctx context.Context, id string, body RemoveElasticIpReverseDnsJSONRequestBody) (*RemoveElasticIpReverseDnsResponse, error) {
	rsp, err := c.RemoveElasticIpReverseDns(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseRemoveElasticIpReverseDnsResponse(rsp)
}

// UpdateElasticIpReverseDnsWithBodyWithResponse request with arbitrary body returning *UpdateElasticIpReverseDnsResponse
func (c *ClientWithResponses) UpdateElasticIpReverseDnsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateElasticIpReverseDnsResponse, error) {
	rsp, err := c.UpdateElasticIpReverseDnsWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElasticIpReverseDnsResponse(rsp)
}

func (c *ClientWithResponses) UpdateElasticIpReverseDnsWithResponse(ctx context.Context, id string, body UpdateElasticIpReverseDnsJSONRequestBody) (*UpdateElasticIpReverseDnsResponse, error) {
	rsp, err := c.UpdateElasticIpReverseDns(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElasticIpReverseDnsResponse(rsp)
}

// ListEventsWithResponse request returning *ListEventsResponse
func (c *ClientWithResponses) ListEventsWithResponse(ctx context.Context, params *ListEventsParams) (*ListEventsResponse, error) {
	rsp, err := c.ListEvents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListEventsResponse(rsp)
}

// ListInstancesWithResponse request returning *ListInstancesResponse
func (c *ClientWithResponses) ListInstancesWithResponse(ctx context.Context, params *ListInstancesParams) (*ListInstancesResponse, error) {
	rsp, err := c.ListInstances(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListInstancesResponse(rsp)
}

// CreateInstanceWithBodyWithResponse request with arbitrary body returning *CreateInstanceResponse
func (c *ClientWithResponses) CreateInstanceWithBodyWithResponse(ctx context.Context, params *CreateInstanceParams, contentType string, body io.Reader) (*CreateInstanceResponse, error) {
	rsp, err := c.CreateInstanceWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) CreateInstanceWithResponse(ctx context.Context, params *CreateInstanceParams, body CreateInstanceJSONRequestBody) (*CreateInstanceResponse, error) {
	rsp, err := c.CreateInstance(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateInstanceResponse(rsp)
}

// ListInstancePoolsWithResponse request returning *ListInstancePoolsResponse
func (c *ClientWithResponses) ListInstancePoolsWithResponse(ctx context.Context) (*ListInstancePoolsResponse, error) {
	rsp, err := c.ListInstancePools(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListInstancePoolsResponse(rsp)
}

// CreateInstancePoolWithBodyWithResponse request with arbitrary body returning *CreateInstancePoolResponse
func (c *ClientWithResponses) CreateInstancePoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateInstancePoolResponse, error) {
	rsp, err := c.CreateInstancePoolWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateInstancePoolResponse(rsp)
}

func (c *ClientWithResponses) CreateInstancePoolWithResponse(ctx context.Context, body CreateInstancePoolJSONRequestBody) (*CreateInstancePoolResponse, error) {
	rsp, err := c.CreateInstancePool(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateInstancePoolResponse(rsp)
}

// DestroyInstancePoolWithResponse request returning *DestroyInstancePoolResponse
func (c *ClientWithResponses) DestroyInstancePoolWithResponse(ctx context.Context, id string) (*DestroyInstancePoolResponse, error) {
	rsp, err := c.DestroyInstancePool(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDestroyInstancePoolResponse(rsp)
}

// GetInstancePoolWithResponse request returning *GetInstancePoolResponse
func (c *ClientWithResponses) GetInstancePoolWithResponse(ctx context.Context, id string) (*GetInstancePoolResponse, error) {
	rsp, err := c.GetInstancePool(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancePoolResponse(rsp)
}

// UpdateInstancePoolDescriptionWithBodyWithResponse request with arbitrary body returning *UpdateInstancePoolDescriptionResponse
func (c *ClientWithResponses) UpdateInstancePoolDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstancePoolDescriptionResponse, error) {
	rsp, err := c.UpdateInstancePoolDescriptionWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstancePoolDescriptionResponse(rsp)
}

func (c *ClientWithResponses) UpdateInstancePoolDescriptionWithResponse(ctx context.Context, id string, body UpdateInstancePoolDescriptionJSONRequestBody) (*UpdateInstancePoolDescriptionResponse, error) {
	rsp, err := c.UpdateInstancePoolDescription(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstancePoolDescriptionResponse(rsp)
}

// UpdateInstancePoolTemplateWithBodyWithResponse request with arbitrary body returning *UpdateInstancePoolTemplateResponse
func (c *ClientWithResponses) UpdateInstancePoolTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstancePoolTemplateResponse, error) {
	rsp, err := c.UpdateInstancePoolTemplateWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstancePoolTemplateResponse(rsp)
}

func (c *ClientWithResponses) UpdateInstancePoolTemplateWithResponse(ctx context.Context, id string, body UpdateInstancePoolTemplateJSONRequestBody) (*UpdateInstancePoolTemplateResponse, error) {
	rsp, err := c.UpdateInstancePoolTemplate(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstancePoolTemplateResponse(rsp)
}

// UpdateInstancePoolTopologyWithBodyWithResponse request with arbitrary body returning *UpdateInstancePoolTopologyResponse
func (c *ClientWithResponses) UpdateInstancePoolTopologyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstancePoolTopologyResponse, error) {
	rsp, err := c.UpdateInstancePoolTopologyWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstancePoolTopologyResponse(rsp)
}

func (c *ClientWithResponses) UpdateInstancePoolTopologyWithResponse(ctx context.Context, id string, body UpdateInstancePoolTopologyJSONRequestBody) (*UpdateInstancePoolTopologyResponse, error) {
	rsp, err := c.UpdateInstancePoolTopology(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstancePoolTopologyResponse(rsp)
}

// UpdateInstancePoolUserDataWithBodyWithResponse request with arbitrary body returning *UpdateInstancePoolUserDataResponse
func (c *ClientWithResponses) UpdateInstancePoolUserDataWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstancePoolUserDataResponse, error) {
	rsp, err := c.UpdateInstancePoolUserDataWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstancePoolUserDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateInstancePoolUserDataWithResponse(ctx context.Context, id string, body UpdateInstancePoolUserDataJSONRequestBody) (*UpdateInstancePoolUserDataResponse, error) {
	rsp, err := c.UpdateInstancePoolUserData(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstancePoolUserDataResponse(rsp)
}

// ListInstanceTypesWithResponse request returning *ListInstanceTypesResponse
func (c *ClientWithResponses) ListInstanceTypesWithResponse(ctx context.Context) (*ListInstanceTypesResponse, error) {
	rsp, err := c.ListInstanceTypes(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListInstanceTypesResponse(rsp)
}

// DestroyInstanceWithResponse request returning *DestroyInstanceResponse
func (c *ClientWithResponses) DestroyInstanceWithResponse(ctx context.Context, id string) (*DestroyInstanceResponse, error) {
	rsp, err := c.DestroyInstance(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDestroyInstanceResponse(rsp)
}

// GetInstanceWithResponse request returning *GetInstanceResponse
func (c *ClientWithResponses) GetInstanceWithResponse(ctx context.Context, id string) (*GetInstanceResponse, error) {
	rsp, err := c.GetInstance(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetInstanceResponse(rsp)
}

// AllocateIpv6OnInstanceWithResponse request returning *AllocateIpv6OnInstanceResponse
func (c *ClientWithResponses) AllocateIpv6OnInstanceWithResponse(ctx context.Context, id string) (*AllocateIpv6OnInstanceResponse, error) {
	rsp, err := c.AllocateIpv6OnInstance(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseAllocateIpv6OnInstanceResponse(rsp)
}

// AttachElasticIpOnInstanceWithBodyWithResponse request with arbitrary body returning *AttachElasticIpOnInstanceResponse
func (c *ClientWithResponses) AttachElasticIpOnInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*AttachElasticIpOnInstanceResponse, error) {
	rsp, err := c.AttachElasticIpOnInstanceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAttachElasticIpOnInstanceResponse(rsp)
}

func (c *ClientWithResponses) AttachElasticIpOnInstanceWithResponse(ctx context.Context, id string, body AttachElasticIpOnInstanceJSONRequestBody) (*AttachElasticIpOnInstanceResponse, error) {
	rsp, err := c.AttachElasticIpOnInstance(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseAttachElasticIpOnInstanceResponse(rsp)
}

// CreateSnapshotWithResponse request returning *CreateSnapshotResponse
func (c *ClientWithResponses) CreateSnapshotWithResponse(ctx context.Context, id string) (*CreateSnapshotResponse, error) {
	rsp, err := c.CreateSnapshot(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnapshotResponse(rsp)
}

// UpdateInstanceDescriptionWithBodyWithResponse request with arbitrary body returning *UpdateInstanceDescriptionResponse
func (c *ClientWithResponses) UpdateInstanceDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstanceDescriptionResponse, error) {
	rsp, err := c.UpdateInstanceDescriptionWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstanceDescriptionResponse(rsp)
}

func (c *ClientWithResponses) UpdateInstanceDescriptionWithResponse(ctx context.Context, id string, body UpdateInstanceDescriptionJSONRequestBody) (*UpdateInstanceDescriptionResponse, error) {
	rsp, err := c.UpdateInstanceDescription(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstanceDescriptionResponse(rsp)
}

// DetachElasticIpFromInstanceWithBodyWithResponse request with arbitrary body returning *DetachElasticIpFromInstanceResponse
func (c *ClientWithResponses) DetachElasticIpFromInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*DetachElasticIpFromInstanceResponse, error) {
	rsp, err := c.DetachElasticIpFromInstanceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDetachElasticIpFromInstanceResponse(rsp)
}

func (c *ClientWithResponses) DetachElasticIpFromInstanceWithResponse(ctx context.Context, id string, body DetachElasticIpFromInstanceJSONRequestBody) (*DetachElasticIpFromInstanceResponse, error) {
	rsp, err := c.DetachElasticIpFromInstance(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDetachElasticIpFromInstanceResponse(rsp)
}

// UpdateInstanceTypeWithBodyWithResponse request with arbitrary body returning *UpdateInstanceTypeResponse
func (c *ClientWithResponses) UpdateInstanceTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstanceTypeResponse, error) {
	rsp, err := c.UpdateInstanceTypeWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstanceTypeResponse(rsp)
}

func (c *ClientWithResponses) UpdateInstanceTypeWithResponse(ctx context.Context, id string, body UpdateInstanceTypeJSONRequestBody) (*UpdateInstanceTypeResponse, error) {
	rsp, err := c.UpdateInstanceType(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstanceTypeResponse(rsp)
}

// RebootInstanceWithResponse request returning *RebootInstanceResponse
func (c *ClientWithResponses) RebootInstanceWithResponse(ctx context.Context, id string) (*RebootInstanceResponse, error) {
	rsp, err := c.RebootInstance(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseRebootInstanceResponse(rsp)
}

// ResetInstancePasswordWithResponse request returning *ResetInstancePasswordResponse
func (c *ClientWithResponses) ResetInstancePasswordWithResponse(ctx context.Context, id string) (*ResetInstancePasswordResponse, error) {
	rsp, err := c.ResetInstancePassword(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseResetInstancePasswordResponse(rsp)
}

// RestoreInstanceFromSnapshotWithBodyWithResponse request with arbitrary body returning *RestoreInstanceFromSnapshotResponse
func (c *ClientWithResponses) RestoreInstanceFromSnapshotWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*RestoreInstanceFromSnapshotResponse, error) {
	rsp, err := c.RestoreInstanceFromSnapshotWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRestoreInstanceFromSnapshotResponse(rsp)
}

func (c *ClientWithResponses) RestoreInstanceFromSnapshotWithResponse(ctx context.Context, id string, body RestoreInstanceFromSnapshotJSONRequestBody) (*RestoreInstanceFromSnapshotResponse, error) {
	rsp, err := c.RestoreInstanceFromSnapshot(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseRestoreInstanceFromSnapshotResponse(rsp)
}

// RestoreInstanceFromTemplateWithBodyWithResponse request with arbitrary body returning *RestoreInstanceFromTemplateResponse
func (c *ClientWithResponses) RestoreInstanceFromTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*RestoreInstanceFromTemplateResponse, error) {
	rsp, err := c.RestoreInstanceFromTemplateWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRestoreInstanceFromTemplateResponse(rsp)
}

func (c *ClientWithResponses) RestoreInstanceFromTemplateWithResponse(ctx context.Context, id string, body RestoreInstanceFromTemplateJSONRequestBody) (*RestoreInstanceFromTemplateResponse, error) {
	rsp, err := c.RestoreInstanceFromTemplate(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseRestoreInstanceFromTemplateResponse(rsp)
}

// RemoveInstanceReverseDnsWithResponse request returning *RemoveInstanceReverseDnsResponse
func (c *ClientWithResponses) RemoveInstanceReverseDnsWithResponse(ctx context.Context, id string) (*RemoveInstanceReverseDnsResponse, error) {
	rsp, err := c.RemoveInstanceReverseDns(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseRemoveInstanceReverseDnsResponse(rsp)
}

// UpdateInstanceReverseDnsWithBodyWithResponse request with arbitrary body returning *UpdateInstanceReverseDnsResponse
func (c *ClientWithResponses) UpdateInstanceReverseDnsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstanceReverseDnsResponse, error) {
	rsp, err := c.UpdateInstanceReverseDnsWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstanceReverseDnsResponse(rsp)
}

func (c *ClientWithResponses) UpdateInstanceReverseDnsWithResponse(ctx context.Context, id string, body UpdateInstanceReverseDnsJSONRequestBody) (*UpdateInstanceReverseDnsResponse, error) {
	rsp, err := c.UpdateInstanceReverseDns(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstanceReverseDnsResponse(rsp)
}

// UpdateInstanceSecurityGroupsWithBodyWithResponse request with arbitrary body returning *UpdateInstanceSecurityGroupsResponse
func (c *ClientWithResponses) UpdateInstanceSecurityGroupsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstanceSecurityGroupsResponse, error) {
	rsp, err := c.UpdateInstanceSecurityGroupsWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstanceSecurityGroupsResponse(rsp)
}

func (c *ClientWithResponses) UpdateInstanceSecurityGroupsWithResponse(ctx context.Context, id string, body UpdateInstanceSecurityGroupsJSONRequestBody) (*UpdateInstanceSecurityGroupsResponse, error) {
	rsp, err := c.UpdateInstanceSecurityGroups(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstanceSecurityGroupsResponse(rsp)
}

// StartInstanceWithResponse request returning *StartInstanceResponse
func (c *ClientWithResponses) StartInstanceWithResponse(ctx context.Context, id string, params *StartInstanceParams) (*StartInstanceResponse, error) {
	rsp, err := c.StartInstance(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseStartInstanceResponse(rsp)
}

// StopInstanceWithResponse request returning *StopInstanceResponse
func (c *ClientWithResponses) StopInstanceWithResponse(ctx context.Context, id string) (*StopInstanceResponse, error) {
	rsp, err := c.StopInstance(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseStopInstanceResponse(rsp)
}

// UpdateInstanceUserDataWithBodyWithResponse request with arbitrary body returning *UpdateInstanceUserDataResponse
func (c *ClientWithResponses) UpdateInstanceUserDataWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateInstanceUserDataResponse, error) {
	rsp, err := c.UpdateInstanceUserDataWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstanceUserDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateInstanceUserDataWithResponse(ctx context.Context, id string, body UpdateInstanceUserDataJSONRequestBody) (*UpdateInstanceUserDataResponse, error) {
	rsp, err := c.UpdateInstanceUserData(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInstanceUserDataResponse(rsp)
}

// ListLoadBalancersWithResponse request returning *ListLoadBalancersResponse
func (c *ClientWithResponses) ListLoadBalancersWithResponse(ctx context.Context) (*ListLoadBalancersResponse, error) {
	rsp, err := c.ListLoadBalancers(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListLoadBalancersResponse(rsp)
}

// CreateLoadBalancerWithBodyWithResponse request with arbitrary body returning *CreateLoadBalancerResponse
func (c *ClientWithResponses) CreateLoadBalancerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateLoadBalancerResponse, error) {
	rsp, err := c.CreateLoadBalancerWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLoadBalancerResponse(rsp)
}

func (c *ClientWithResponses) CreateLoadBalancerWithResponse(ctx context.Context, body CreateLoadBalancerJSONRequestBody) (*CreateLoadBalancerResponse, error) {
	rsp, err := c.CreateLoadBalancer(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateLoadBalancerResponse(rsp)
}

// DestroyLoadBalancerWithResponse request returning *DestroyLoadBalancerResponse
func (c *ClientWithResponses) DestroyLoadBalancerWithResponse(ctx context.Context, id string) (*DestroyLoadBalancerResponse, error) {
	rsp, err := c.DestroyLoadBalancer(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDestroyLoadBalancerResponse(rsp)
}

// GetLoadBalancerWithResponse request returning *GetLoadBalancerResponse
func (c *ClientWithResponses) GetLoadBalancerWithResponse(ctx context.Context, id string) (*GetLoadBalancerResponse, error) {
	rsp, err := c.GetLoadBalancer(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetLoadBalancerResponse(rsp)
}

// UpdateLoadBalancerWithBodyWithResponse request with arbitrary body returning *UpdateLoadBalancerResponse
func (c *ClientWithResponses) UpdateLoadBalancerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateLoadBalancerResponse, error) {
	rsp, err := c.UpdateLoadBalancerWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLoadBalancerResponse(rsp)
}

func (c *ClientWithResponses) UpdateLoadBalancerWithResponse(ctx context.Context, id string, body UpdateLoadBalancerJSONRequestBody) (*UpdateLoadBalancerResponse, error) {
	rsp, err := c.UpdateLoadBalancer(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLoadBalancerResponse(rsp)
}

// AddServiceToLoadBalancerWithBodyWithResponse request with arbitrary body returning *AddServiceToLoadBalancerResponse
func (c *ClientWithResponses) AddServiceToLoadBalancerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*AddServiceToLoadBalancerResponse, error) {
	rsp, err := c.AddServiceToLoadBalancerWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddServiceToLoadBalancerResponse(rsp)
}

func (c *ClientWithResponses) AddServiceToLoadBalancerWithResponse(ctx context.Context, id string, body AddServiceToLoadBalancerJSONRequestBody) (*AddServiceToLoadBalancerResponse, error) {
	rsp, err := c.AddServiceToLoadBalancer(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseAddServiceToLoadBalancerResponse(rsp)
}

// DeleteLoadBalancerServiceWithResponse request returning *DeleteLoadBalancerServiceResponse
func (c *ClientWithResponses) DeleteLoadBalancerServiceWithResponse(ctx context.Context, id string, serviceId string) (*DeleteLoadBalancerServiceResponse, error) {
	rsp, err := c.DeleteLoadBalancerService(ctx, id, serviceId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLoadBalancerServiceResponse(rsp)
}

// GetLoadBalancerServiceWithResponse request returning *GetLoadBalancerServiceResponse
func (c *ClientWithResponses) GetLoadBalancerServiceWithResponse(ctx context.Context, id string, serviceId string) (*GetLoadBalancerServiceResponse, error) {
	rsp, err := c.GetLoadBalancerService(ctx, id, serviceId)
	if err != nil {
		return nil, err
	}
	return ParseGetLoadBalancerServiceResponse(rsp)
}

// UpdateLoadBalancerServiceWithBodyWithResponse request with arbitrary body returning *UpdateLoadBalancerServiceResponse
func (c *ClientWithResponses) UpdateLoadBalancerServiceWithBodyWithResponse(ctx context.Context, id string, serviceId string, contentType string, body io.Reader) (*UpdateLoadBalancerServiceResponse, error) {
	rsp, err := c.UpdateLoadBalancerServiceWithBody(ctx, id, serviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLoadBalancerServiceResponse(rsp)
}

func (c *ClientWithResponses) UpdateLoadBalancerServiceWithResponse(ctx context.Context, id string, serviceId string, body UpdateLoadBalancerServiceJSONRequestBody) (*UpdateLoadBalancerServiceResponse, error) {
	rsp, err := c.UpdateLoadBalancerService(ctx, id, serviceId, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLoadBalancerServiceResponse(rsp)
}

// PingWithResponse request returning *PingResponse
func (c *ClientWithResponses) PingWithResponse(ctx context.Context) (*PingResponse, error) {
	rsp, err := c.Ping(ctx)
	if err != nil {
		return nil, err
	}
	return ParsePingResponse(rsp)
}

// ListResultsWithResponse request returning *ListResultsResponse
func (c *ClientWithResponses) ListResultsWithResponse(ctx context.Context) (*ListResultsResponse, error) {
	rsp, err := c.ListResults(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListResultsResponse(rsp)
}

// GetResultWithResponse request returning *GetResultResponse
func (c *ClientWithResponses) GetResultWithResponse(ctx context.Context, id string) (*GetResultResponse, error) {
	rsp, err := c.GetResult(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetResultResponse(rsp)
}

// ListSecurityGroupsWithResponse request returning *ListSecurityGroupsResponse
func (c *ClientWithResponses) ListSecurityGroupsWithResponse(ctx context.Context) (*ListSecurityGroupsResponse, error) {
	rsp, err := c.ListSecurityGroups(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListSecurityGroupsResponse(rsp)
}

// CreateSecurityGroupWithBodyWithResponse request with arbitrary body returning *CreateSecurityGroupResponse
func (c *ClientWithResponses) CreateSecurityGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSecurityGroupResponse, error) {
	rsp, err := c.CreateSecurityGroupWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecurityGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateSecurityGroupWithResponse(ctx context.Context, body CreateSecurityGroupJSONRequestBody) (*CreateSecurityGroupResponse, error) {
	rsp, err := c.CreateSecurityGroup(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecurityGroupResponse(rsp)
}

// DestroySecurityGroupWithResponse request returning *DestroySecurityGroupResponse
func (c *ClientWithResponses) DestroySecurityGroupWithResponse(ctx context.Context, id string) (*DestroySecurityGroupResponse, error) {
	rsp, err := c.DestroySecurityGroup(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDestroySecurityGroupResponse(rsp)
}

// GetSecurityGroupWithResponse request returning *GetSecurityGroupResponse
func (c *ClientWithResponses) GetSecurityGroupWithResponse(ctx context.Context, id string) (*GetSecurityGroupResponse, error) {
	rsp, err := c.GetSecurityGroup(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetSecurityGroupResponse(rsp)
}

// AddRuleToSecurityGroupWithBodyWithResponse request with arbitrary body returning *AddRuleToSecurityGroupResponse
func (c *ClientWithResponses) AddRuleToSecurityGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*AddRuleToSecurityGroupResponse, error) {
	rsp, err := c.AddRuleToSecurityGroupWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddRuleToSecurityGroupResponse(rsp)
}

func (c *ClientWithResponses) AddRuleToSecurityGroupWithResponse(ctx context.Context, id string, body AddRuleToSecurityGroupJSONRequestBody) (*AddRuleToSecurityGroupResponse, error) {
	rsp, err := c.AddRuleToSecurityGroup(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseAddRuleToSecurityGroupResponse(rsp)
}

// DeleteRuleFromSecurityGroupWithResponse request returning *DeleteRuleFromSecurityGroupResponse
func (c *ClientWithResponses) DeleteRuleFromSecurityGroupWithResponse(ctx context.Context, id string, ruleId string) (*DeleteRuleFromSecurityGroupResponse, error) {
	rsp, err := c.DeleteRuleFromSecurityGroup(ctx, id, ruleId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRuleFromSecurityGroupResponse(rsp)
}

// UpdateSecurityGroupDescriptionWithBodyWithResponse request with arbitrary body returning *UpdateSecurityGroupDescriptionResponse
func (c *ClientWithResponses) UpdateSecurityGroupDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateSecurityGroupDescriptionResponse, error) {
	rsp, err := c.UpdateSecurityGroupDescriptionWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecurityGroupDescriptionResponse(rsp)
}

func (c *ClientWithResponses) UpdateSecurityGroupDescriptionWithResponse(ctx context.Context, id string, body UpdateSecurityGroupDescriptionJSONRequestBody) (*UpdateSecurityGroupDescriptionResponse, error) {
	rsp, err := c.UpdateSecurityGroupDescription(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecurityGroupDescriptionResponse(rsp)
}

// ListSecurityGroupInstancesWithResponse request returning *ListSecurityGroupInstancesResponse
func (c *ClientWithResponses) ListSecurityGroupInstancesWithResponse(ctx context.Context, id string) (*ListSecurityGroupInstancesResponse, error) {
	rsp, err := c.ListSecurityGroupInstances(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseListSecurityGroupInstancesResponse(rsp)
}

// UpdateSecurityGroupRulesWithBodyWithResponse request with arbitrary body returning *UpdateSecurityGroupRulesResponse
func (c *ClientWithResponses) UpdateSecurityGroupRulesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateSecurityGroupRulesResponse, error) {
	rsp, err := c.UpdateSecurityGroupRulesWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecurityGroupRulesResponse(rsp)
}

func (c *ClientWithResponses) UpdateSecurityGroupRulesWithResponse(ctx context.Context, id string, body UpdateSecurityGroupRulesJSONRequestBody) (*UpdateSecurityGroupRulesResponse, error) {
	rsp, err := c.UpdateSecurityGroupRules(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecurityGroupRulesResponse(rsp)
}

// ListSnapshotsWithResponse request returning *ListSnapshotsResponse
func (c *ClientWithResponses) ListSnapshotsWithResponse(ctx context.Context) (*ListSnapshotsResponse, error) {
	rsp, err := c.ListSnapshots(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListSnapshotsResponse(rsp)
}

// DestroySnapshotWithResponse request returning *DestroySnapshotResponse
func (c *ClientWithResponses) DestroySnapshotWithResponse(ctx context.Context, id string) (*DestroySnapshotResponse, error) {
	rsp, err := c.DestroySnapshot(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDestroySnapshotResponse(rsp)
}

// GetSnapshotWithResponse request returning *GetSnapshotResponse
func (c *ClientWithResponses) GetSnapshotWithResponse(ctx context.Context, id string) (*GetSnapshotResponse, error) {
	rsp, err := c.GetSnapshot(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotResponse(rsp)
}

// UpdateSnapshotDescriptionWithBodyWithResponse request with arbitrary body returning *UpdateSnapshotDescriptionResponse
func (c *ClientWithResponses) UpdateSnapshotDescriptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateSnapshotDescriptionResponse, error) {
	rsp, err := c.UpdateSnapshotDescriptionWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSnapshotDescriptionResponse(rsp)
}

func (c *ClientWithResponses) UpdateSnapshotDescriptionWithResponse(ctx context.Context, id string, body UpdateSnapshotDescriptionJSONRequestBody) (*UpdateSnapshotDescriptionResponse, error) {
	rsp, err := c.UpdateSnapshotDescription(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSnapshotDescriptionResponse(rsp)
}

// ListSshKeysWithResponse request returning *ListSshKeysResponse
func (c *ClientWithResponses) ListSshKeysWithResponse(ctx context.Context) (*ListSshKeysResponse, error) {
	rsp, err := c.ListSshKeys(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListSshKeysResponse(rsp)
}

// DeleteSshKeyWithResponse request returning *DeleteSshKeyResponse
func (c *ClientWithResponses) DeleteSshKeyWithResponse(ctx context.Context, name string) (*DeleteSshKeyResponse, error) {
	rsp, err := c.DeleteSshKey(ctx, name)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSshKeyResponse(rsp)
}

// ListTemplatesWithResponse request returning *ListTemplatesResponse
func (c *ClientWithResponses) ListTemplatesWithResponse(ctx context.Context, params *ListTemplatesParams) (*ListTemplatesResponse, error) {
	rsp, err := c.ListTemplates(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListTemplatesResponse(rsp)
}

// RegisterTemplateWithBodyWithResponse request with arbitrary body returning *RegisterTemplateResponse
func (c *ClientWithResponses) RegisterTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RegisterTemplateResponse, error) {
	rsp, err := c.RegisterTemplateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterTemplateResponse(rsp)
}

func (c *ClientWithResponses) RegisterTemplateWithResponse(ctx context.Context, body RegisterTemplateJSONRequestBody) (*RegisterTemplateResponse, error) {
	rsp, err := c.RegisterTemplate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterTemplateResponse(rsp)
}

// DestroyTemplateWithResponse request returning *DestroyTemplateResponse
func (c *ClientWithResponses) DestroyTemplateWithResponse(ctx context.Context, id string) (*DestroyTemplateResponse, error) {
	rsp, err := c.DestroyTemplate(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDestroyTemplateResponse(rsp)
}

// VersionWithResponse request returning *VersionResponse
func (c *ClientWithResponses) VersionWithResponse(ctx context.Context) (*VersionResponse, error) {
	rsp, err := c.Version(ctx)
	if err != nil {
		return nil, err
	}
	return ParseVersionResponse(rsp)
}

// ListZonesWithResponse request returning *ListZonesResponse
func (c *ClientWithResponses) ListZonesWithResponse(ctx context.Context) (*ListZonesResponse, error) {
	rsp, err := c.ListZones(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListZonesResponse(rsp)
}

// ParseIndexResponse parses an HTTP response from a IndexWithResponse call
func ParseIndexResponse(rsp *http.Response) (*IndexResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &IndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAntiAffinityGroupsResponse parses an HTTP response from a ListAntiAffinityGroupsWithResponse call
func ParseListAntiAffinityGroupsResponse(rsp *http.Response) (*ListAntiAffinityGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAntiAffinityGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AntiAffinityGroups *[]AntiAffinityGroup `json:"anti-affinity-groups,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAntiAffinityGroupResponse parses an HTTP response from a CreateAntiAffinityGroupWithResponse call
func ParseCreateAntiAffinityGroupResponse(rsp *http.Response) (*CreateAntiAffinityGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateAntiAffinityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AntiAffinityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestroyAntiAffinityGroupResponse parses an HTTP response from a DestroyAntiAffinityGroupWithResponse call
func ParseDestroyAntiAffinityGroupResponse(rsp *http.Response) (*DestroyAntiAffinityGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DestroyAntiAffinityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAntiAffinityGroupDescriptionResponse parses an HTTP response from a UpdateAntiAffinityGroupDescriptionWithResponse call
func ParseUpdateAntiAffinityGroupDescriptionResponse(rsp *http.Response) (*UpdateAntiAffinityGroupDescriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateAntiAffinityGroupDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AntiAffinityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAntiAffinityGroupInstancesResponse parses an HTTP response from a ListAntiAffinityGroupInstancesWithResponse call
func ParseListAntiAffinityGroupInstancesResponse(rsp *http.Response) (*ListAntiAffinityGroupInstancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAntiAffinityGroupInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Instances *[]Instance `json:"instances,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListApiKeysResponse parses an HTTP response from a ListApiKeysWithResponse call
func ParseListApiKeysResponse(rsp *http.Response) (*ListApiKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApiKeys *[]ApiKey `json:"api-keys,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenerateApiKeyResponse parses an HTTP response from a GenerateApiKeyWithResponse call
func ParseGenerateApiKeyResponse(rsp *http.Response) (*GenerateApiKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GenerateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevokeApiKeyResponse parses an HTTP response from a RevokeApiKeyWithResponse call
func ParseRevokeApiKeyResponse(rsp *http.Response) (*RevokeApiKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RevokeApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiKeyResponse parses an HTTP response from a GetApiKeyWithResponse call
func ParseGetApiKeyResponse(rsp *http.Response) (*GetApiKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenerateSshKeyResponse parses an HTTP response from a GenerateSshKeyWithResponse call
func ParseGenerateSshKeyResponse(rsp *http.Response) (*GenerateSshKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GenerateSshKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SshKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImportSshKeyResponse parses an HTTP response from a ImportSshKeyWithResponse call
func ParseImportSshKeyResponse(rsp *http.Response) (*ImportSshKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ImportSshKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SshKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListElasticIpsResponse parses an HTTP response from a ListElasticIpsWithResponse call
func ParseListElasticIpsResponse(rsp *http.Response) (*ListElasticIpsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListElasticIpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ElasticIps *[]ElasticIp `json:"elastic-ips,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllocateElasticIpResponse parses an HTTP response from a AllocateElasticIpWithResponse call
func ParseAllocateElasticIpResponse(rsp *http.Response) (*AllocateElasticIpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AllocateElasticIpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseReleaseElasticIpResponse parses an HTTP response from a ReleaseElasticIpWithResponse call
func ParseReleaseElasticIpResponse(rsp *http.Response) (*ReleaseElasticIpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReleaseElasticIpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetElasticIpResponse parses an HTTP response from a GetElasticIpWithResponse call
func ParseGetElasticIpResponse(rsp *http.Response) (*GetElasticIpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetElasticIpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ElasticIp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateElasticIpHealthcheckResponse parses an HTTP response from a UpdateElasticIpHealthcheckWithResponse call
func ParseUpdateElasticIpHealthcheckResponse(rsp *http.Response) (*UpdateElasticIpHealthcheckResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateElasticIpHealthcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ElasticIp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveElasticIpReverseDnsResponse parses an HTTP response from a RemoveElasticIpReverseDnsWithResponse call
func ParseRemoveElasticIpReverseDnsResponse(rsp *http.Response) (*RemoveElasticIpReverseDnsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveElasticIpReverseDnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ElasticIp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateElasticIpReverseDnsResponse parses an HTTP response from a UpdateElasticIpReverseDnsWithResponse call
func ParseUpdateElasticIpReverseDnsResponse(rsp *http.Response) (*UpdateElasticIpReverseDnsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateElasticIpReverseDnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ElasticIp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListEventsResponse parses an HTTP response from a ListEventsWithResponse call
func ParseListEventsResponse(rsp *http.Response) (*ListEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Events *[]Event `json:"events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInstancesResponse parses an HTTP response from a ListInstancesWithResponse call
func ParseListInstancesResponse(rsp *http.Response) (*ListInstancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Instances *[]Instance `json:"instances,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateInstanceResponse parses an HTTP response from a CreateInstanceWithResponse call
func ParseCreateInstanceResponse(rsp *http.Response) (*CreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseListInstancePoolsResponse parses an HTTP response from a ListInstancePoolsWithResponse call
func ParseListInstancePoolsResponse(rsp *http.Response) (*ListInstancePoolsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListInstancePoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InstancePools *[]InstancePool `json:"instance-pools,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateInstancePoolResponse parses an HTTP response from a CreateInstancePoolWithResponse call
func ParseCreateInstancePoolResponse(rsp *http.Response) (*CreateInstancePoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateInstancePoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstancePool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestroyInstancePoolResponse parses an HTTP response from a DestroyInstancePoolWithResponse call
func ParseDestroyInstancePoolResponse(rsp *http.Response) (*DestroyInstancePoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DestroyInstancePoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetInstancePoolResponse parses an HTTP response from a GetInstancePoolWithResponse call
func ParseGetInstancePoolResponse(rsp *http.Response) (*GetInstancePoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInstancePoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstancePool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateInstancePoolDescriptionResponse parses an HTTP response from a UpdateInstancePoolDescriptionWithResponse call
func ParseUpdateInstancePoolDescriptionResponse(rsp *http.Response) (*UpdateInstancePoolDescriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateInstancePoolDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstancePool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateInstancePoolTemplateResponse parses an HTTP response from a UpdateInstancePoolTemplateWithResponse call
func ParseUpdateInstancePoolTemplateResponse(rsp *http.Response) (*UpdateInstancePoolTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateInstancePoolTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstancePool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateInstancePoolTopologyResponse parses an HTTP response from a UpdateInstancePoolTopologyWithResponse call
func ParseUpdateInstancePoolTopologyResponse(rsp *http.Response) (*UpdateInstancePoolTopologyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateInstancePoolTopologyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstancePool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateInstancePoolUserDataResponse parses an HTTP response from a UpdateInstancePoolUserDataWithResponse call
func ParseUpdateInstancePoolUserDataResponse(rsp *http.Response) (*UpdateInstancePoolUserDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateInstancePoolUserDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstancePool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInstanceTypesResponse parses an HTTP response from a ListInstanceTypesWithResponse call
func ParseListInstanceTypesResponse(rsp *http.Response) (*ListInstanceTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListInstanceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InstanceTypes *[]InstanceType `json:"instance-types,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestroyInstanceResponse parses an HTTP response from a DestroyInstanceWithResponse call
func ParseDestroyInstanceResponse(rsp *http.Response) (*DestroyInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DestroyInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetInstanceResponse parses an HTTP response from a GetInstanceWithResponse call
func ParseGetInstanceResponse(rsp *http.Response) (*GetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAllocateIpv6OnInstanceResponse parses an HTTP response from a AllocateIpv6OnInstanceWithResponse call
func ParseAllocateIpv6OnInstanceResponse(rsp *http.Response) (*AllocateIpv6OnInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AllocateIpv6OnInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAttachElasticIpOnInstanceResponse parses an HTTP response from a AttachElasticIpOnInstanceWithResponse call
func ParseAttachElasticIpOnInstanceResponse(rsp *http.Response) (*AttachElasticIpOnInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AttachElasticIpOnInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseCreateSnapshotResponse parses an HTTP response from a CreateSnapshotWithResponse call
func ParseCreateSnapshotResponse(rsp *http.Response) (*CreateSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseUpdateInstanceDescriptionResponse parses an HTTP response from a UpdateInstanceDescriptionWithResponse call
func ParseUpdateInstanceDescriptionResponse(rsp *http.Response) (*UpdateInstanceDescriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateInstanceDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDetachElasticIpFromInstanceResponse parses an HTTP response from a DetachElasticIpFromInstanceWithResponse call
func ParseDetachElasticIpFromInstanceResponse(rsp *http.Response) (*DetachElasticIpFromInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DetachElasticIpFromInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseUpdateInstanceTypeResponse parses an HTTP response from a UpdateInstanceTypeWithResponse call
func ParseUpdateInstanceTypeResponse(rsp *http.Response) (*UpdateInstanceTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateInstanceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRebootInstanceResponse parses an HTTP response from a RebootInstanceWithResponse call
func ParseRebootInstanceResponse(rsp *http.Response) (*RebootInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RebootInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseResetInstancePasswordResponse parses an HTTP response from a ResetInstancePasswordWithResponse call
func ParseResetInstancePasswordResponse(rsp *http.Response) (*ResetInstancePasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResetInstancePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRestoreInstanceFromSnapshotResponse parses an HTTP response from a RestoreInstanceFromSnapshotWithResponse call
func ParseRestoreInstanceFromSnapshotResponse(rsp *http.Response) (*RestoreInstanceFromSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RestoreInstanceFromSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRestoreInstanceFromTemplateResponse parses an HTTP response from a RestoreInstanceFromTemplateWithResponse call
func ParseRestoreInstanceFromTemplateResponse(rsp *http.Response) (*RestoreInstanceFromTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RestoreInstanceFromTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseRemoveInstanceReverseDnsResponse parses an HTTP response from a RemoveInstanceReverseDnsWithResponse call
func ParseRemoveInstanceReverseDnsResponse(rsp *http.Response) (*RemoveInstanceReverseDnsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveInstanceReverseDnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseUpdateInstanceReverseDnsResponse parses an HTTP response from a UpdateInstanceReverseDnsWithResponse call
func ParseUpdateInstanceReverseDnsResponse(rsp *http.Response) (*UpdateInstanceReverseDnsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateInstanceReverseDnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseUpdateInstanceSecurityGroupsResponse parses an HTTP response from a UpdateInstanceSecurityGroupsWithResponse call
func ParseUpdateInstanceSecurityGroupsResponse(rsp *http.Response) (*UpdateInstanceSecurityGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateInstanceSecurityGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartInstanceResponse parses an HTTP response from a StartInstanceWithResponse call
func ParseStartInstanceResponse(rsp *http.Response) (*StartInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &StartInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseStopInstanceResponse parses an HTTP response from a StopInstanceWithResponse call
func ParseStopInstanceResponse(rsp *http.Response) (*StopInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &StopInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateInstanceUserDataResponse parses an HTTP response from a UpdateInstanceUserDataWithResponse call
func ParseUpdateInstanceUserDataResponse(rsp *http.Response) (*UpdateInstanceUserDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateInstanceUserDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListLoadBalancersResponse parses an HTTP response from a ListLoadBalancersWithResponse call
func ParseListLoadBalancersResponse(rsp *http.Response) (*ListLoadBalancersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListLoadBalancersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			LoadBalancers *[]LoadBalancer `json:"load-balancers,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateLoadBalancerResponse parses an HTTP response from a CreateLoadBalancerWithResponse call
func ParseCreateLoadBalancerResponse(rsp *http.Response) (*CreateLoadBalancerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateLoadBalancerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestroyLoadBalancerResponse parses an HTTP response from a DestroyLoadBalancerWithResponse call
func ParseDestroyLoadBalancerResponse(rsp *http.Response) (*DestroyLoadBalancerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DestroyLoadBalancerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLoadBalancerResponse parses an HTTP response from a GetLoadBalancerWithResponse call
func ParseGetLoadBalancerResponse(rsp *http.Response) (*GetLoadBalancerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLoadBalancerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoadBalancer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateLoadBalancerResponse parses an HTTP response from a UpdateLoadBalancerWithResponse call
func ParseUpdateLoadBalancerResponse(rsp *http.Response) (*UpdateLoadBalancerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateLoadBalancerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddServiceToLoadBalancerResponse parses an HTTP response from a AddServiceToLoadBalancerWithResponse call
func ParseAddServiceToLoadBalancerResponse(rsp *http.Response) (*AddServiceToLoadBalancerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddServiceToLoadBalancerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteLoadBalancerServiceResponse parses an HTTP response from a DeleteLoadBalancerServiceWithResponse call
func ParseDeleteLoadBalancerServiceResponse(rsp *http.Response) (*DeleteLoadBalancerServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteLoadBalancerServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLoadBalancerServiceResponse parses an HTTP response from a GetLoadBalancerServiceWithResponse call
func ParseGetLoadBalancerServiceResponse(rsp *http.Response) (*GetLoadBalancerServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLoadBalancerServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoadBalancerService
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateLoadBalancerServiceResponse parses an HTTP response from a UpdateLoadBalancerServiceWithResponse call
func ParseUpdateLoadBalancerServiceResponse(rsp *http.Response) (*UpdateLoadBalancerServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateLoadBalancerServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePingResponse parses an HTTP response from a PingWithResponse call
func ParsePingResponse(rsp *http.Response) (*PingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListResultsResponse parses an HTTP response from a ListResultsWithResponse call
func ParseListResultsResponse(rsp *http.Response) (*ListResultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results *[]Result `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetResultResponse parses an HTTP response from a GetResultWithResponse call
func ParseGetResultResponse(rsp *http.Response) (*GetResultResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSecurityGroupsResponse parses an HTTP response from a ListSecurityGroupsWithResponse call
func ParseListSecurityGroupsResponse(rsp *http.Response) (*ListSecurityGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSecurityGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			SecurityGroups *[]SecurityGroup `json:"security-groups,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSecurityGroupResponse parses an HTTP response from a CreateSecurityGroupWithResponse call
func ParseCreateSecurityGroupResponse(rsp *http.Response) (*CreateSecurityGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestroySecurityGroupResponse parses an HTTP response from a DestroySecurityGroupWithResponse call
func ParseDestroySecurityGroupResponse(rsp *http.Response) (*DestroySecurityGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DestroySecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSecurityGroupResponse parses an HTTP response from a GetSecurityGroupWithResponse call
func ParseGetSecurityGroupResponse(rsp *http.Response) (*GetSecurityGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddRuleToSecurityGroupResponse parses an HTTP response from a AddRuleToSecurityGroupWithResponse call
func ParseAddRuleToSecurityGroupResponse(rsp *http.Response) (*AddRuleToSecurityGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddRuleToSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroupRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRuleFromSecurityGroupResponse parses an HTTP response from a DeleteRuleFromSecurityGroupWithResponse call
func ParseDeleteRuleFromSecurityGroupResponse(rsp *http.Response) (*DeleteRuleFromSecurityGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteRuleFromSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSecurityGroupDescriptionResponse parses an HTTP response from a UpdateSecurityGroupDescriptionWithResponse call
func ParseUpdateSecurityGroupDescriptionResponse(rsp *http.Response) (*UpdateSecurityGroupDescriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSecurityGroupDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSecurityGroupInstancesResponse parses an HTTP response from a ListSecurityGroupInstancesWithResponse call
func ParseListSecurityGroupInstancesResponse(rsp *http.Response) (*ListSecurityGroupInstancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSecurityGroupInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Instances *[]Instance `json:"instances,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSecurityGroupRulesResponse parses an HTTP response from a UpdateSecurityGroupRulesWithResponse call
func ParseUpdateSecurityGroupRulesResponse(rsp *http.Response) (*UpdateSecurityGroupRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSecurityGroupRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSnapshotsResponse parses an HTTP response from a ListSnapshotsWithResponse call
func ParseListSnapshotsResponse(rsp *http.Response) (*ListSnapshotsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Snapshots *[]Snapshot `json:"snapshots,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestroySnapshotResponse parses an HTTP response from a DestroySnapshotWithResponse call
func ParseDestroySnapshotResponse(rsp *http.Response) (*DestroySnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DestroySnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetSnapshotResponse parses an HTTP response from a GetSnapshotWithResponse call
func ParseGetSnapshotResponse(rsp *http.Response) (*GetSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Snapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateSnapshotDescriptionResponse parses an HTTP response from a UpdateSnapshotDescriptionWithResponse call
func ParseUpdateSnapshotDescriptionResponse(rsp *http.Response) (*UpdateSnapshotDescriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSnapshotDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Snapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSshKeysResponse parses an HTTP response from a ListSshKeysWithResponse call
func ParseListSshKeysResponse(rsp *http.Response) (*ListSshKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSshKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			SshKeys *[]ApiKey `json:"ssh-keys,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSshKeyResponse parses an HTTP response from a DeleteSshKeyWithResponse call
func ParseDeleteSshKeyResponse(rsp *http.Response) (*DeleteSshKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSshKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListTemplatesResponse parses an HTTP response from a ListTemplatesWithResponse call
func ParseListTemplatesResponse(rsp *http.Response) (*ListTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Templates *[]Template `json:"templates,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterTemplateResponse parses an HTTP response from a RegisterTemplateWithResponse call
func ParseRegisterTemplateResponse(rsp *http.Response) (*RegisterTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RegisterTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDestroyTemplateResponse parses an HTTP response from a DestroyTemplateWithResponse call
func ParseDestroyTemplateResponse(rsp *http.Response) (*DestroyTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DestroyTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Result
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseVersionResponse parses an HTTP response from a VersionWithResponse call
func ParseVersionResponse(rsp *http.Response) (*VersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &VersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListZonesResponse parses an HTTP response from a ListZonesWithResponse call
func ParseListZonesResponse(rsp *http.Response) (*ListZonesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Zones *[]Zone `json:"zones,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
